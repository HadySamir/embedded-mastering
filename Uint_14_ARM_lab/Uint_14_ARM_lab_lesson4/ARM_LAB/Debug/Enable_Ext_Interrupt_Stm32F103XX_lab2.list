
Enable_Ext_Interrupt_Stm32F103XX_lab2.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000340  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000340  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a68  00000000  00000000  00010369  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001f5  00000000  00000000  00010dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000198  00000000  00000000  00010fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000070  00000000  00000000  00011160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000058  00000000  00000000  000111d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d44  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000672  00000000  00000000  00012f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000081d8  00000000  00000000  000135de  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b7b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000100  00000000  00000000  0001b834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000320 	.word	0x08000320

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000320 	.word	0x08000320

08000170 <Clock_init>:
// AFIO
#define AFIO_BASE   0x4001000
#define AFIO_EXTICR1 *(vuint32_t *)(AFIO_BASE + 0x08)

void Clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC_APB2ENR |= (1<<2);          // Enable Clock for GPIOA
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <Clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <Clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= (1<<0);          // Alternate function IO clock enable
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <Clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <Clock_init+0x24>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_init>:

void GPIO_init(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	//pin13 portA output (General purpose output push-pull, max speed 2 MHz)
	GPIOA_CRH &= 0xFF0FFFFF;
 800019c:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <GPIO_init+0x44>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a0e      	ldr	r2, [pc, #56]	; (80001dc <GPIO_init+0x44>)
 80001a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001a6:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 80001a8:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <GPIO_init+0x44>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a0b      	ldr	r2, [pc, #44]	; (80001dc <GPIO_init+0x44>)
 80001ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001b2:	6013      	str	r3, [r2, #0]
	//01: Floating input (reset state), pin0 is floating because this pin will lined with button
	GPIOA_CRL &=0xFFFFFFF0;
 80001b4:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <GPIO_init+0x48>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <GPIO_init+0x48>)
 80001ba:	f023 030f 	bic.w	r3, r3, #15
 80001be:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |=(1<<3);
 80001c0:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <GPIO_init+0x48>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <GPIO_init+0x48>)
 80001c6:	f043 0308 	orr.w	r3, r3, #8
 80001ca:	6013      	str	r3, [r2, #0]
	// External interrupt configuration register for PA0
	AFIO_EXTICR1 = 0;
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <GPIO_init+0x4c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]

}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	40010804 	.word	0x40010804
 80001e0:	40010800 	.word	0x40010800
 80001e4:	04001008 	.word	0x04001008

080001e8 <EXTI_init>:

void EXTI_init(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	EXTI_IMR |= (1<<0); // Interrupt mask register enable for EXTI0
 80001ec:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <EXTI_init+0x30>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a09      	ldr	r2, [pc, #36]	; (8000218 <EXTI_init+0x30>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6013      	str	r3, [r2, #0]
	EXTI_RTSR |= (1<<0); //  Rising trigger enabled for EXTI0
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <EXTI_init+0x34>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <EXTI_init+0x34>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6013      	str	r3, [r2, #0]

	//from Vector table>>>EXTI0>>>Position 6 at hardware
	NVIC_ISER0 |= (1<<6); // Enable NVIC IRQ 6 (EXTI0)
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <EXTI_init+0x38>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a05      	ldr	r2, [pc, #20]	; (8000220 <EXTI_init+0x38>)
 800020a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	40010400 	.word	0x40010400
 800021c:	40010408 	.word	0x40010408
 8000220:	e000e100 	.word	0xe000e100

08000224 <SWITCH_USER_LEVEL>:
	privileged,
	unprivileged,

};
void SWITCH_USER_LEVEL(enum userlevel level)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
					"mrs CONTROL, r3 \n\t");
		break;


	}
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <main>:

int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	Clock_init();
 800023c:	f7ff ff98 	bl	8000170 <Clock_init>
	GPIO_init();
 8000240:	f7ff ffaa 	bl	8000198 <GPIO_init>
	EXTI_init();
 8000244:	f7ff ffd0 	bl	80001e8 <EXTI_init>
	SWITCH_USER_LEVEL(privileged);
 8000248:	2000      	movs	r0, #0
 800024a:	f7ff ffeb 	bl	8000224 <SWITCH_USER_LEVEL>
	SWITCH_USER_LEVEL(unprivileged);
 800024e:	2001      	movs	r0, #1
 8000250:	f7ff ffe8 	bl	8000224 <SWITCH_USER_LEVEL>

	while(1);
 8000254:	e7fe      	b.n	8000254 <main+0x1c>
	...

08000258 <EXTI0_IRQHandler>:
}

void EXTI0_IRQHandler()
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

	// Toggle LED on pin 13
	GPIOA_ODR ^= (1<<13) ;
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <EXTI0_IRQHandler+0x24>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a06      	ldr	r2, [pc, #24]	; (800027c <EXTI0_IRQHandler+0x24>)
 8000262:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000266:	6013      	str	r3, [r2, #0]

	// Clear pending status of EXTI0
	EXTI_PR |= (1<<0);
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <EXTI0_IRQHandler+0x28>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a04      	ldr	r2, [pc, #16]	; (8000280 <EXTI0_IRQHandler+0x28>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	4001080c 	.word	0x4001080c
 8000280:	40010414 	.word	0x40010414

08000284 <Reset_Handler>:
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x2>)
 8000286:	4685      	mov	sp, r0
 8000288:	f3af 8000 	nop.w
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LoopForever+0x6>)
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LoopForever+0xa>)
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <LoopForever+0xe>)
 8000292:	2300      	movs	r3, #0
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:
 8000296:	58d4      	ldr	r4, [r2, r3]
 8000298:	50c4      	str	r4, [r0, r3]
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:
 800029c:	18c4      	adds	r4, r0, r3
 800029e:	428c      	cmp	r4, r1
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <LoopForever+0x12>)
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <LoopForever+0x16>)
 80002a6:	2300      	movs	r3, #0
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:
 80002aa:	6013      	str	r3, [r2, #0]
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:
 80002ae:	42a2      	cmp	r2, r4
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
 80002b6:	f7ff ffbf 	bl	8000238 <main>

080002ba <LoopForever>:
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
 80002bc:	20002800 	.word	0x20002800
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000000 	.word	0x20000000
 80002c8:	08000340 	.word	0x08000340
 80002cc:	20000000 	.word	0x20000000
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC1_2_IRQHandler>:
 80002d4:	e7fe      	b.n	80002d4 <ADC1_2_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	2500      	movs	r5, #0
 80002dc:	4e0c      	ldr	r6, [pc, #48]	; (8000310 <__libc_init_array+0x38>)
 80002de:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <__libc_init_array+0x3c>)
 80002e0:	1ba4      	subs	r4, r4, r6
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	f000 f81a 	bl	8000320 <_init>
 80002ec:	2500      	movs	r5, #0
 80002ee:	4e0a      	ldr	r6, [pc, #40]	; (8000318 <__libc_init_array+0x40>)
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <__libc_init_array+0x44>)
 80002f2:	1ba4      	subs	r4, r4, r6
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000300:	4798      	blx	r3
 8000302:	3501      	adds	r5, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030a:	4798      	blx	r3
 800030c:	3501      	adds	r5, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
