
Section_3_keypad_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a9c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bcc  08000bcc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bcc  08000bcc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000bcc  08000bcc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bcc  08000bcc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bcc  08000bcc  00010bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bd0  08000bd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000018  08000bec  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08000bec  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040f5  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a45  00000000  00000000  00024136  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a9c  00000000  00000000  00024b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00025618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  000257e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000bb9  00000000  00000000  00025960  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000022b0  00000000  00000000  00026519  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b28f  00000000  00000000  000287c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00033a58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005a4  00000000  00000000  00033ad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000018 	.word	0x20000018
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bb4 	.word	0x08000bb4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000001c 	.word	0x2000001c
 800016c:	08000bb4 	.word	0x08000bb4

08000170 <clock_init>:
#include "Stm32_f103c6_Drivers_EXTI.h"
#include "Stm32_f103c6_Drivers_USART.h"
#include "Stm32_f103c6_Drivers_RCC.h"


void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:


int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
	USART_Config USARTCFG ;

	clock_init();
 80001aa:	f7ff ffe1 	bl	8000170 <clock_init>

	USARTCFG.BaudRate = USART_BaudRate_115200;
 80001ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001b2:	60bb      	str	r3, [r7, #8]
	USARTCFG.FlowControl = USART_FlowControl_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]
	USARTCFG.IRQ_Enable = USART_NONE;
 80001b8:	2300      	movs	r3, #0
 80001ba:	743b      	strb	r3, [r7, #16]
	USARTCFG.P_CallBack_Fun = NULL ;
 80001bc:	2300      	movs	r3, #0
 80001be:	617b      	str	r3, [r7, #20]
	USARTCFG.Parity = USART_Parity_None;
 80001c0:	2300      	movs	r3, #0
 80001c2:	73bb      	strb	r3, [r7, #14]
	USARTCFG.Payload_length = USART_DataLength8B;
 80001c4:	2300      	movs	r3, #0
 80001c6:	737b      	strb	r3, [r7, #13]
	USARTCFG.StopBits = USART_StopBits_1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	733b      	strb	r3, [r7, #12]
	USARTCFG.USART_Mode = USART_TX_RX;
 80001cc:	230c      	movs	r3, #12
 80001ce:	713b      	strb	r3, [r7, #4]
	USART_init(USART1 , &USARTCFG);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <main+0x54>)
 80001d6:	f000 fa97 	bl	8000708 <USART_init>
	USART_SetPins(USART1);
 80001da:	4807      	ldr	r0, [pc, #28]	; (80001f8 <main+0x54>)
 80001dc:	f000 fb70 	bl	80008c0 <USART_SetPins>


	while (1)
	{
		USART_Send(USART1  , &ch , Enable );
 80001e0:	2200      	movs	r2, #0
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <main+0x58>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <main+0x54>)
 80001e6:	f000 fbd1 	bl	800098c <USART_Send>
		USART_Recieve(USART1, &ch , Enable );
 80001ea:	2200      	movs	r2, #0
 80001ec:	4903      	ldr	r1, [pc, #12]	; (80001fc <main+0x58>)
 80001ee:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x54>)
 80001f0:	f000 fc1a 	bl	8000a28 <USART_Recieve>
		USART_Send(USART1  , &ch , Enable );
 80001f4:	e7f4      	b.n	80001e0 <main+0x3c>
 80001f6:	bf00      	nop
 80001f8:	40013800 	.word	0x40013800
 80001fc:	20000040 	.word	0x20000040

08000200 <Reset_Handler>:
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
 8000202:	4685      	mov	sp, r0
 8000204:	f3af 8000 	nop.w
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
 800020e:	2300      	movs	r3, #0
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:
 8000212:	58d4      	ldr	r4, [r2, r3]
 8000214:	50c4      	str	r4, [r0, r3]
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:
 8000218:	18c4      	adds	r4, r0, r3
 800021a:	428c      	cmp	r4, r1
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
 8000222:	2300      	movs	r3, #0
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:
 800022a:	42a2      	cmp	r2, r4
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>
 800022e:	f000 fc9d 	bl	8000b6c <__libc_init_array>
 8000232:	f7ff ffb7 	bl	80001a4 <main>

08000236 <LoopForever>:
 8000236:	e7fe      	b.n	8000236 <LoopForever>
 8000238:	20002800 	.word	0x20002800
 800023c:	20000000 	.word	0x20000000
 8000240:	20000018 	.word	0x20000018
 8000244:	08000bd4 	.word	0x08000bd4
 8000248:	20000018 	.word	0x20000018
 800024c:	20000084 	.word	0x20000084

08000250 <ADC1_2_IRQHandler>:
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <EXTI0_IRQHandler>:

/*=====================================================================================
 *                        GENERIRC MACROS
 *=====================================================================================	*/
//THIS EXTIx_IRQHandler; Call automatically when the IRQ happened
void EXTI0_IRQHandler() {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//Clear EXTI_PR at First
	EXTI_PR->PR |= (1 << 0);
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6153      	str	r3, [r2, #20]
	//Call IRQ_Call
	GP_IRQ_CALLBACK[0]();
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <EXTI0_IRQHandler+0x20>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4798      	blx	r3
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010400 	.word	0x40010400
 8000274:	20000044 	.word	0x20000044

08000278 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	EXTI_PR->PR |= (1 << 1);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <EXTI1_IRQHandler+0x20>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4798      	blx	r3
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010400 	.word	0x40010400
 8000298:	20000044 	.word	0x20000044

0800029c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	EXTI_PR->PR |= (1 << 2);
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <EXTI2_IRQHandler+0x20>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4798      	blx	r3
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	20000044 	.word	0x20000044

080002c0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	EXTI_PR->PR |= (1 << 3);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI3_IRQHandler+0x20>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4798      	blx	r3
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010400 	.word	0x40010400
 80002e0:	20000044 	.word	0x20000044

080002e4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	EXTI_PR->PR |= (1 << 4);
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI4_IRQHandler+0x20>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4798      	blx	r3
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	20000044 	.word	0x20000044

08000308 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {//When IRQ Happened the PR Already Happened.
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if (EXTI_PR->PR & (1 << 5)) {
 800030c:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	2b00      	cmp	r3, #0
 8000316:	d009      	beq.n	800032c <EXTI9_5_IRQHandler+0x24>
		EXTI_PR->PR |= (1 << 5);
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a24      	ldr	r2, [pc, #144]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[5]();
 8000324:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <EXTI9_5_IRQHandler+0xac>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4798      	blx	r3
		GP_IRQ_CALLBACK[8]();
	} else if (EXTI_PR->PR & (1 << 9)) {
		EXTI_PR->PR |= (1 << 9);
		GP_IRQ_CALLBACK[9]();
	}
}
 800032a:	e03e      	b.n	80003aa <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI_PR->PR & (1 << 6)) {
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000334:	2b00      	cmp	r3, #0
 8000336:	d009      	beq.n	800034c <EXTI9_5_IRQHandler+0x44>
		EXTI_PR->PR |= (1 << 6);
 8000338:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800033e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000342:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[6]();
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <EXTI9_5_IRQHandler+0xac>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4798      	blx	r3
}
 800034a:	e02e      	b.n	80003aa <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI_PR->PR & (1 << 7)) {
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000354:	2b00      	cmp	r3, #0
 8000356:	d009      	beq.n	800036c <EXTI9_5_IRQHandler+0x64>
		EXTI_PR->PR |= (1 << 7);
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800035e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000362:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[7]();
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <EXTI9_5_IRQHandler+0xac>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	4798      	blx	r3
}
 800036a:	e01e      	b.n	80003aa <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI_PR->PR & (1 << 8)) {
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000374:	2b00      	cmp	r3, #0
 8000376:	d009      	beq.n	800038c <EXTI9_5_IRQHandler+0x84>
		EXTI_PR->PR |= (1 << 8);
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800037e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000382:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[8]();
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <EXTI9_5_IRQHandler+0xac>)
 8000386:	6a1b      	ldr	r3, [r3, #32]
 8000388:	4798      	blx	r3
}
 800038a:	e00e      	b.n	80003aa <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI_PR->PR & (1 << 9)) {
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <EXTI9_5_IRQHandler+0xa2>
		EXTI_PR->PR |= (1 << 9);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <EXTI9_5_IRQHandler+0xa8>)
 800039e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[9]();
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <EXTI9_5_IRQHandler+0xac>)
 80003a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a8:	4798      	blx	r3
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40010400 	.word	0x40010400
 80003b4:	20000044 	.word	0x20000044

080003b8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	if (EXTI_PR->PR & (1 << 10)) {
 80003bc:	4b30      	ldr	r3, [pc, #192]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d009      	beq.n	80003dc <EXTI15_10_IRQHandler+0x24>
		EXTI_PR->PR |= (1 << 10);
 80003c8:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a2c      	ldr	r2, [pc, #176]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 80003ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003d2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[10]();
 80003d4:	4b2b      	ldr	r3, [pc, #172]	; (8000484 <EXTI15_10_IRQHandler+0xcc>)
 80003d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d8:	4798      	blx	r3
	} else if (EXTI_PR->PR & (1 << 15)) {
		EXTI_PR->PR |= (1 << 15);
		GP_IRQ_CALLBACK[15]();
	}

}
 80003da:	e04e      	b.n	800047a <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 11)) {
 80003dc:	4b28      	ldr	r3, [pc, #160]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d009      	beq.n	80003fc <EXTI15_10_IRQHandler+0x44>
		EXTI_PR->PR |= (1 << 11);
 80003e8:	4b25      	ldr	r3, [pc, #148]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a24      	ldr	r2, [pc, #144]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 80003ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003f2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[11]();
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <EXTI15_10_IRQHandler+0xcc>)
 80003f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003f8:	4798      	blx	r3
}
 80003fa:	e03e      	b.n	800047a <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 12)) {
 80003fc:	4b20      	ldr	r3, [pc, #128]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000404:	2b00      	cmp	r3, #0
 8000406:	d009      	beq.n	800041c <EXTI15_10_IRQHandler+0x64>
		EXTI_PR->PR |= (1 << 12);
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800040e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000412:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[12]();
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <EXTI15_10_IRQHandler+0xcc>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4798      	blx	r3
}
 800041a:	e02e      	b.n	800047a <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 13)) {
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000424:	2b00      	cmp	r3, #0
 8000426:	d009      	beq.n	800043c <EXTI15_10_IRQHandler+0x84>
		EXTI_PR->PR |= (1 << 13);
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a14      	ldr	r2, [pc, #80]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800042e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000432:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[13]();
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <EXTI15_10_IRQHandler+0xcc>)
 8000436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000438:	4798      	blx	r3
}
 800043a:	e01e      	b.n	800047a <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 14)) {
 800043c:	4b10      	ldr	r3, [pc, #64]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000444:	2b00      	cmp	r3, #0
 8000446:	d009      	beq.n	800045c <EXTI15_10_IRQHandler+0xa4>
		EXTI_PR->PR |= (1 << 14);
 8000448:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800044e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000452:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[14]();
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <EXTI15_10_IRQHandler+0xcc>)
 8000456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000458:	4798      	blx	r3
}
 800045a:	e00e      	b.n	800047a <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI_PR->PR & (1 << 15)) {
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000464:	2b00      	cmp	r3, #0
 8000466:	d008      	beq.n	800047a <EXTI15_10_IRQHandler+0xc2>
		EXTI_PR->PR |= (1 << 15);
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <EXTI15_10_IRQHandler+0xc8>)
 800046e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000472:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[15]();
 8000474:	4b03      	ldr	r3, [pc, #12]	; (8000484 <EXTI15_10_IRQHandler+0xcc>)
 8000476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000478:	4798      	blx	r3
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40010400 	.word	0x40010400
 8000484:	20000044 	.word	0x20000044

08000488 <Get_CRLH_Position>:
 * @param[in]	-PinNumber: which  pinGet_CRLH_Position number according @ref
 * 				 GPIO PINS_define to get bit
 * @retval		-Starting bit
 * Note			-none
======================================================================================*/
uint8_t Get_CRLH_Position(uint16_t PinNumber){
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 8000492:	88fb      	ldrh	r3, [r7, #6]
 8000494:	2b80      	cmp	r3, #128	; 0x80
 8000496:	d042      	beq.n	800051e <Get_CRLH_Position+0x96>
 8000498:	2b80      	cmp	r3, #128	; 0x80
 800049a:	dc11      	bgt.n	80004c0 <Get_CRLH_Position+0x38>
 800049c:	2b08      	cmp	r3, #8
 800049e:	d036      	beq.n	800050e <Get_CRLH_Position+0x86>
 80004a0:	2b08      	cmp	r3, #8
 80004a2:	dc06      	bgt.n	80004b2 <Get_CRLH_Position+0x2a>
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d02e      	beq.n	8000506 <Get_CRLH_Position+0x7e>
 80004a8:	2b04      	cmp	r3, #4
 80004aa:	d02e      	beq.n	800050a <Get_CRLH_Position+0x82>
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d028      	beq.n	8000502 <Get_CRLH_Position+0x7a>
 80004b0:	e047      	b.n	8000542 <Get_CRLH_Position+0xba>
 80004b2:	2b20      	cmp	r3, #32
 80004b4:	d02f      	beq.n	8000516 <Get_CRLH_Position+0x8e>
 80004b6:	2b40      	cmp	r3, #64	; 0x40
 80004b8:	d02f      	beq.n	800051a <Get_CRLH_Position+0x92>
 80004ba:	2b10      	cmp	r3, #16
 80004bc:	d029      	beq.n	8000512 <Get_CRLH_Position+0x8a>
 80004be:	e040      	b.n	8000542 <Get_CRLH_Position+0xba>
 80004c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004c4:	d033      	beq.n	800052e <Get_CRLH_Position+0xa6>
 80004c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004ca:	dc09      	bgt.n	80004e0 <Get_CRLH_Position+0x58>
 80004cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004d0:	d029      	beq.n	8000526 <Get_CRLH_Position+0x9e>
 80004d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004d6:	d028      	beq.n	800052a <Get_CRLH_Position+0xa2>
 80004d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004dc:	d021      	beq.n	8000522 <Get_CRLH_Position+0x9a>
 80004de:	e030      	b.n	8000542 <Get_CRLH_Position+0xba>
 80004e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e4:	d027      	beq.n	8000536 <Get_CRLH_Position+0xae>
 80004e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ea:	dc03      	bgt.n	80004f4 <Get_CRLH_Position+0x6c>
 80004ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004f0:	d01f      	beq.n	8000532 <Get_CRLH_Position+0xaa>
 80004f2:	e026      	b.n	8000542 <Get_CRLH_Position+0xba>
 80004f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004f8:	d01f      	beq.n	800053a <Get_CRLH_Position+0xb2>
 80004fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004fe:	d01e      	beq.n	800053e <Get_CRLH_Position+0xb6>
 8000500:	e01f      	b.n	8000542 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000502:	2300      	movs	r3, #0
 8000504:	e01e      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000506:	2304      	movs	r3, #4
 8000508:	e01c      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800050a:	2308      	movs	r3, #8
 800050c:	e01a      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800050e:	230c      	movs	r3, #12
 8000510:	e018      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000512:	2310      	movs	r3, #16
 8000514:	e016      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000516:	2314      	movs	r3, #20
 8000518:	e014      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800051a:	2318      	movs	r3, #24
 800051c:	e012      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800051e:	231c      	movs	r3, #28
 8000520:	e010      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000522:	2300      	movs	r3, #0
 8000524:	e00e      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000526:	2304      	movs	r3, #4
 8000528:	e00c      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800052a:	2308      	movs	r3, #8
 800052c:	e00a      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800052e:	230c      	movs	r3, #12
 8000530:	e008      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000532:	2310      	movs	r3, #16
 8000534:	e006      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000536:	2314      	movs	r3, #20
 8000538:	e004      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800053a:	2318      	movs	r3, #24
 800053c:	e002      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800053e:	231c      	movs	r3, #28
 8000540:	e000      	b.n	8000544 <Get_CRLH_Position+0xbc>
		break;


	}
	return 0;
 8000542:	2300      	movs	r3, #0
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <MCAL_GPIO_INIT>:
 *				 the configuration information for the specified GPIO PIN.
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules,but LQFP48 Package
 * 				 has only GPIO A,B,PART of C/D exported as external PINS from the M
======================================================================================*/
void MCAL_GPIO_INIT(GPIO_Typedef *GPIOX, GPIO_PIN_CONFIG_T *PinConfig){
 800054e:	b590      	push	{r4, r7, lr}
 8000550:	b085      	sub	sp, #20
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) (x=A..G) >> Configure pin0>>pin7
	//Port configuration register High (GPIOx_CRL) (x=A..G) >> Configure pin8>>pin15

	volatile uint32_t* ConfigRegister=NULL; //4 bytes because CRL OR CRH Are 4 Bytes REGISTER
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config=0;//1 Byte >>Need ONLY 4 Bits for MODE&CNY
 800055c:	2300      	movs	r3, #0
 800055e:	73fb      	strb	r3, [r7, #15]
	ConfigRegister=(PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;//if GPIO's pin less than 8 so ConfigRegister will have address of CRL else will have CRH
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d801      	bhi.n	800056c <MCAL_GPIO_INIT+0x1e>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	e001      	b.n	8000570 <MCAL_GPIO_INIT+0x22>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3304      	adds	r3, #4
 8000570:	60bb      	str	r3, [r7, #8]

	//Clear MODEy[1:0]: & CNFy[1:0]:
	(*ConfigRegister) &=~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));// 1111 will be shifter to Bit's Number of Pin Number and will be cleared
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff86 	bl	8000488 <Get_CRLH_Position>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	230f      	movs	r3, #15
 8000582:	4093      	lsls	r3, r2
 8000584:	43da      	mvns	r2, r3
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	401a      	ands	r2, r3
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]

	//Want to know if the mode OUT OR IN and whats its CNY
	//01: Floating input (reset state)

	if((PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_PP) ||
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	2b07      	cmp	r3, #7
 8000596:	d00b      	beq.n	80005b0 <MCAL_GPIO_INIT+0x62>
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	789b      	ldrb	r3, [r3, #2]
 800059c:	2b06      	cmp	r3, #6
 800059e:	d007      	beq.n	80005b0 <MCAL_GPIO_INIT+0x62>
			(PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_PP)){
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	789b      	ldrb	r3, [r3, #2]
	if((PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_AF_PP) ||
 80005a4:	2b05      	cmp	r3, #5
 80005a6:	d003      	beq.n	80005b0 <MCAL_GPIO_INIT+0x62>
			(PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_PinMode ==GPIO_MODE_OUTPUT_PP)){
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	789b      	ldrb	r3, [r3, #2]
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d10e      	bne.n	80005ce <MCAL_GPIO_INIT+0x80>
		Pin_Config =( (((PinConfig->GPIO_PinMode -4)<<2) | (PinConfig->GPIO_output_speed)) &0x0f);//&0x0f to ensure that the first 4 bits are only set.
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	789b      	ldrb	r3, [r3, #2]
 80005b4:	3b04      	subs	r3, #4
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	78db      	ldrb	r3, [r3, #3]
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	f003 030f 	and.w	r3, r3, #15
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e02a      	b.n	8000624 <MCAL_GPIO_INIT+0xd6>
	}

	else{ //MODE = 00: Input mode (reset state)
		if((PinConfig ->GPIO_PinMode == GPIO_MODE_INPUT_FLO) ||(PinConfig ->GPIO_PinMode == GPIO_MODE_ANALOG) ){
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	789b      	ldrb	r3, [r3, #2]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d003      	beq.n	80005de <MCAL_GPIO_INIT+0x90>
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d107      	bne.n	80005ee <MCAL_GPIO_INIT+0xa0>
			//Set alwasy MODE [1:0]00
			Pin_Config =( (((PinConfig->GPIO_PinMode )<<2) | 0x0) &0x0f);//&0x0f to ensure that the first 4 bits are only set.
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	789b      	ldrb	r3, [r3, #2]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e01a      	b.n	8000624 <MCAL_GPIO_INIT+0xd6>
		}

		else if((PinConfig ->GPIO_PinMode == GPIO_MODE_AF_INPUT)){ //Will BE input floating
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	2b08      	cmp	r3, #8
 80005f4:	d102      	bne.n	80005fc <MCAL_GPIO_INIT+0xae>
			Pin_Config =( (((GPIO_MODE_INPUT_FLO)<<2) | 0x0) &0x0f);
 80005f6:	2304      	movs	r3, #4
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	e013      	b.n	8000624 <MCAL_GPIO_INIT+0xd6>
		}
		else{//PU OR PD Input
			Pin_Config =( (((GPIO_MODE_INPUT_PU)<<2) | 0x0) &0x0f);
 80005fc:	2308      	movs	r3, #8
 80005fe:	73fb      	strb	r3, [r7, #15]
			if(PinConfig ->GPIO_PinMode == GPIO_MODE_INPUT_PU){
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	789b      	ldrb	r3, [r3, #2]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d105      	bne.n	8000614 <MCAL_GPIO_INIT+0xc6>
				//Table 20 >> ODR -->1
				GPIOX->ODR = PinConfig->GPIO_PinNumber; //GPIO_PinNumber Already 1<<NO
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	e007      	b.n	8000624 <MCAL_GPIO_INIT+0xd6>
			}
			else{
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber); //GPIO_PinNumber Already 0<<NO
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	8812      	ldrh	r2, [r2, #0]
 800061c:	43d2      	mvns	r2, r2
 800061e:	401a      	ands	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*ConfigRegister) |= ((Pin_Config)<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));//Shift Left the Pin_Config which have 4 Bits of MODE&CY to Pin Number.
 8000624:	7bfc      	ldrb	r4, [r7, #15]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff2c 	bl	8000488 <Get_CRLH_Position>
 8000630:	4603      	mov	r3, r0
 8000632:	fa04 f203 	lsl.w	r2, r4, r3
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	431a      	orrs	r2, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	601a      	str	r2, [r3, #0]

}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <MCAL_RCC_getSYSCLK_Freq>:
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512
 */
uint8_t AHB_PrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};
uint32_t  MCAL_RCC_getSYSCLK_Freq(void){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
/*
 * 	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
 */
	uint8_t SW = (RCC_PR->CFGR >> 2) & 0b11;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MCAL_RCC_getSYSCLK_Freq+0x3c>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	089b      	lsrs	r3, r3, #2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f003 0303 	and.w	r3, r3, #3
 800065a:	71fb      	strb	r3, [r7, #7]
	switch(SW){
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d005      	beq.n	800066e <MCAL_RCC_getSYSCLK_Freq+0x26>
 8000662:	2b02      	cmp	r3, #2
 8000664:	d005      	beq.n	8000672 <MCAL_RCC_getSYSCLK_Freq+0x2a>
 8000666:	2b00      	cmp	r3, #0
 8000668:	d105      	bne.n	8000676 <MCAL_RCC_getSYSCLK_Freq+0x2e>
	case 0 :
		return HSI;
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MCAL_RCC_getSYSCLK_Freq+0x40>)
 800066c:	e004      	b.n	8000678 <MCAL_RCC_getSYSCLK_Freq+0x30>
		break;
	case 1 :
		//todo need to calculate  it //HSE User Should Specify it
		return HSE;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <MCAL_RCC_getSYSCLK_Freq+0x44>)
 8000670:	e002      	b.n	8000678 <MCAL_RCC_getSYSCLK_Freq+0x30>
			break;
	case 2 :
		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return HSE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MCAL_RCC_getSYSCLK_Freq+0x44>)
 8000674:	e000      	b.n	8000678 <MCAL_RCC_getSYSCLK_Freq+0x30>
			break;
	}
	return 0;
 8000676:	2300      	movs	r3, #0
}
 8000678:	4618      	mov	r0, r3
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	007a1200 	.word	0x007a1200
 800068c:	00f42400 	.word	0x00f42400

08000690 <MCAL_RCC_getPCKL1_Freq>:

uint32_t MCAL_RCC_getPCKL1_Freq(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_getHCKL_Freq() >> APB_PrescTable[((RCC_PR->CFGR >> 8) &0b111)]); // First right shift is multiplication
 8000694:	f000 f824 	bl	80006e0 <MCAL_RCC_getHCKL_Freq>
 8000698:	4601      	mov	r1, r0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MCAL_RCC_getPCKL1_Freq+0x20>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	f003 0307 	and.w	r3, r3, #7
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <MCAL_RCC_getPCKL1_Freq+0x24>)
 80006a6:	5cd3      	ldrb	r3, [r2, r3]
 80006a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	20000000 	.word	0x20000000

080006b8 <MCAL_RCC_getPCKL2_Freq>:
uint32_t  MCAL_RCC_getPCKL2_Freq(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_getHCKL_Freq() >> APB_PrescTable[((RCC_PR->CFGR >> 11) &0b111)]);
 80006bc:	f000 f810 	bl	80006e0 <MCAL_RCC_getHCKL_Freq>
 80006c0:	4601      	mov	r1, r0
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MCAL_RCC_getPCKL2_Freq+0x20>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	0adb      	lsrs	r3, r3, #11
 80006c8:	f003 0307 	and.w	r3, r3, #7
 80006cc:	4a03      	ldr	r2, [pc, #12]	; (80006dc <MCAL_RCC_getPCKL2_Freq+0x24>)
 80006ce:	5cd3      	ldrb	r3, [r2, r3]
 80006d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	20000000 	.word	0x20000000

080006e0 <MCAL_RCC_getHCKL_Freq>:
uint32_t  MCAL_RCC_getHCKL_Freq(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_getSYSCLK_Freq() >> AHB_PrescTable[((RCC_PR->CFGR >> 4) &0b1111)]);
 80006e4:	f7ff ffb0 	bl	8000648 <MCAL_RCC_getSYSCLK_Freq>
 80006e8:	4601      	mov	r1, r0
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <MCAL_RCC_getHCKL_Freq+0x20>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	091b      	lsrs	r3, r3, #4
 80006f0:	f003 030f 	and.w	r3, r3, #15
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <MCAL_RCC_getHCKL_Freq+0x24>)
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	20000008 	.word	0x20000008

08000708 <USART_init>:
 * @param [in] 		- pinConfig: All UART Configuration USART_pinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void USART_init(USART_Typedef* USARTX , USART_Config* USART_Config)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	if(USARTX == USART1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a61      	ldr	r2, [pc, #388]	; (800089c <USART_init+0x194>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d103      	bne.n	8000722 <USART_init+0x1a>
	{
		Global_USART1Config = USART_Config;
 800071a:	4a61      	ldr	r2, [pc, #388]	; (80008a0 <USART_init+0x198>)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	e00e      	b.n	8000740 <USART_init+0x38>

	}
	else if (USARTX == USART2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a5f      	ldr	r2, [pc, #380]	; (80008a4 <USART_init+0x19c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d103      	bne.n	8000732 <USART_init+0x2a>
	{
		Global_USART2Config = USART_Config;
 800072a:	4a5f      	ldr	r2, [pc, #380]	; (80008a8 <USART_init+0x1a0>)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	e006      	b.n	8000740 <USART_init+0x38>

	}
	else if (USARTX == USART3)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a5d      	ldr	r2, [pc, #372]	; (80008ac <USART_init+0x1a4>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d102      	bne.n	8000740 <USART_init+0x38>
	{
		Global_USART3Config = USART_Config;
 800073a:	4a5d      	ldr	r2, [pc, #372]	; (80008b0 <USART_init+0x1a8>)
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	6013      	str	r3, [r2, #0]
	}

	uint32_t pclk , BRR ;

	/*            Enable USART clocks      */
	if (USARTX == USART1) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a56      	ldr	r2, [pc, #344]	; (800089c <USART_init+0x194>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <USART_init+0x4e>
		RCC_USART1_CLK_EN();
 8000748:	4b5a      	ldr	r3, [pc, #360]	; (80008b4 <USART_init+0x1ac>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a59      	ldr	r2, [pc, #356]	; (80008b4 <USART_init+0x1ac>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	e014      	b.n	8000780 <USART_init+0x78>
	}
	else if (USARTX == USART2) {
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a52      	ldr	r2, [pc, #328]	; (80008a4 <USART_init+0x19c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <USART_init+0x64>
		RCC_USART2_CLK_EN();
 800075e:	4b55      	ldr	r3, [pc, #340]	; (80008b4 <USART_init+0x1ac>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a54      	ldr	r2, [pc, #336]	; (80008b4 <USART_init+0x1ac>)
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	e009      	b.n	8000780 <USART_init+0x78>
	} else if (USARTX == USART3) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a4f      	ldr	r2, [pc, #316]	; (80008ac <USART_init+0x1a4>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d105      	bne.n	8000780 <USART_init+0x78>
		RCC_USART3_CLK_EN();
 8000774:	4b4f      	ldr	r3, [pc, #316]	; (80008b4 <USART_init+0x1ac>)
 8000776:	69db      	ldr	r3, [r3, #28]
 8000778:	4a4e      	ldr	r2, [pc, #312]	; (80008b4 <USART_init+0x1ac>)
 800077a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800077e:	61d3      	str	r3, [r2, #28]
	}

	/*            Enable USART Module    	  */
	//Bit 13 UE: USART enable
	USARTX->CR1 |= (1 << 13);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	60da      	str	r2, [r3, #12]
	/*            Enable TX/RX  		      */
	USARTX->CR1 |= USART_Config->USART_Mode;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	431a      	orrs	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60da      	str	r2, [r3, #12]
	/*            Define The StopBits         */
	USARTX->CR2 |= USART_Config->StopBits;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	7a12      	ldrb	r2, [r2, #8]
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	611a      	str	r2, [r3, #16]
	/*            Define The DataBits         */
	USARTX->CR1 |= USART_Config->Payload_length;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	683a      	ldr	r2, [r7, #0]
 80007ae:	7a52      	ldrb	r2, [r2, #9]
 80007b0:	431a      	orrs	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	60da      	str	r2, [r3, #12]
	/*            Configure The Parity        */
	USARTX->CR1 |= USART_Config->Parity;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	7a92      	ldrb	r2, [r2, #10]
 80007be:	431a      	orrs	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	60da      	str	r2, [r3, #12]
	/*            Hardware Flow Control       */
	USARTX->CR3 |= USART_Config->FlowControl;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	7ad2      	ldrb	r2, [r2, #11]
 80007cc:	431a      	orrs	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	615a      	str	r2, [r3, #20]
	/*            Define The BaudRate	      */
	//FCLK - Input clock to the peripheral (PCLK1 for USART2, 3 or PCLK2 for USART1)
	if (USARTX == USART1) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a31      	ldr	r2, [pc, #196]	; (800089c <USART_init+0x194>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d104      	bne.n	80007e4 <USART_init+0xdc>
		pclk = MCAL_RCC_getPCKL1_Freq();
 80007da:	f7ff ff59 	bl	8000690 <MCAL_RCC_getPCKL1_Freq>
 80007de:	4603      	mov	r3, r0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e003      	b.n	80007ec <USART_init+0xe4>
	} else {
		pclk = MCAL_RCC_getPCKL2_Freq();
 80007e4:	f7ff ff68 	bl	80006b8 <MCAL_RCC_getPCKL2_Freq>
 80007e8:	4603      	mov	r3, r0
 80007ea:	60fb      	str	r3, [r7, #12]
	}
	BRR = USART_BRR(pclk, USART_Config->BaudRate);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f8:	0119      	lsls	r1, r3, #4
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	009a      	lsls	r2, r3, #2
 8000804:	441a      	add	r2, r3
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	011b      	lsls	r3, r3, #4
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	fbb0 f3f3 	udiv	r3, r0, r3
 800081c:	2064      	movs	r0, #100	; 0x64
 800081e:	fb00 f303 	mul.w	r3, r0, r3
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <USART_init+0x1b0>)
 8000828:	fba2 2303 	umull	r2, r3, r2, r3
 800082c:	095b      	lsrs	r3, r3, #5
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	430b      	orrs	r3, r1
 8000834:	60bb      	str	r3, [r7, #8]
	USARTX->BRR = BRR;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	609a      	str	r2, [r3, #8]

	/*            Enabling The Interrupt      */
	if (USART_Config->IRQ_Enable != USART_NONE)
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	7b1b      	ldrb	r3, [r3, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d026      	beq.n	8000892 <USART_init+0x18a>
	{
		USARTX->CR1 |= (USART_Config->IRQ_Enable);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	7b12      	ldrb	r2, [r2, #12]
 800084c:	431a      	orrs	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60da      	str	r2, [r3, #12]

		//		Enable NVIC For USARTX IRQ

		if (USARTX == USART1) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a11      	ldr	r2, [pc, #68]	; (800089c <USART_init+0x194>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d106      	bne.n	8000868 <USART_init+0x160>
			NVIC_IRQ37_USART1_Enable;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <USART_init+0x1b4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <USART_init+0x1b4>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	6013      	str	r3, [r2, #0]
			NVIC_IRQ37_USART2_Enable;
		} else if (USARTX == USART3) {
			NVIC_IRQ37_USART3_Enable;
		}
	}
}
 8000866:	e014      	b.n	8000892 <USART_init+0x18a>
		}else if (USARTX == USART2) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <USART_init+0x19c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d106      	bne.n	800087e <USART_init+0x176>
			NVIC_IRQ37_USART2_Enable;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <USART_init+0x1b4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a11      	ldr	r2, [pc, #68]	; (80008bc <USART_init+0x1b4>)
 8000876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	e009      	b.n	8000892 <USART_init+0x18a>
		} else if (USARTX == USART3) {
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <USART_init+0x1a4>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d105      	bne.n	8000892 <USART_init+0x18a>
			NVIC_IRQ37_USART3_Enable;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <USART_init+0x1b4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <USART_init+0x1b4>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6013      	str	r3, [r2, #0]
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40013800 	.word	0x40013800
 80008a0:	20000034 	.word	0x20000034
 80008a4:	40004400 	.word	0x40004400
 80008a8:	20000038 	.word	0x20000038
 80008ac:	40004800 	.word	0x40004800
 80008b0:	2000003c 	.word	0x2000003c
 80008b4:	40021000 	.word	0x40021000
 80008b8:	51eb851f 	.word	0x51eb851f
 80008bc:	e000e104 	.word	0xe000e104

080008c0 <USART_SetPins>:
 * @param [in] 		-USARTX: where x can be (1..3 depending on device used)
 * @retval 			-none
 * @Note			-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after USART_Init()
 */
void USART_SetPins(USART_Typedef* USARTX)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	GPIO_PIN_CONFIG_T GPIO_pinConfig;
	if (USARTX == USART1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <USART_SetPins+0xb8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d118      	bne.n	8000902 <USART_SetPins+0x42>
	{

		// configure  TX PORTA PIN9 As Alternate function Push pull from STM32F103xx_TRM
		GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 80008d0:	2306      	movs	r3, #6
 80008d2:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 80008d4:	2301      	movs	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_9;
 80008d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008dc:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOA_PR, &GPIO_pinConfig);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	4825      	ldr	r0, [pc, #148]	; (800097c <USART_SetPins+0xbc>)
 80008e6:	f7ff fe32 	bl	800054e <MCAL_GPIO_INIT>



		// configure  RX PORTA PIN10 As  Alternate function INPUT from STM32F103xx_TRM
		GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_AF_INPUT;
 80008ea:	2308      	movs	r3, #8
 80008ec:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_10;
 80008ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f2:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOA_PR, &GPIO_pinConfig);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4619      	mov	r1, r3
 80008fa:	4820      	ldr	r0, [pc, #128]	; (800097c <USART_SetPins+0xbc>)
 80008fc:	f7ff fe27 	bl	800054e <MCAL_GPIO_INIT>

		}

	}

}
 8000900:	e036      	b.n	8000970 <USART_SetPins+0xb0>
	else if (USARTX == USART2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <USART_SetPins+0xc0>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d116      	bne.n	8000938 <USART_SetPins+0x78>
		GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 800090a:	2306      	movs	r3, #6
 800090c:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000912:	2304      	movs	r3, #4
 8000914:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOA_PR, &GPIO_pinConfig);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	4817      	ldr	r0, [pc, #92]	; (800097c <USART_SetPins+0xbc>)
 800091e:	f7ff fe16 	bl	800054e <MCAL_GPIO_INIT>
		GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_AF_INPUT;
 8000922:	2308      	movs	r3, #8
 8000924:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000926:	2308      	movs	r3, #8
 8000928:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOA_PR, &GPIO_pinConfig);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <USART_SetPins+0xbc>)
 8000932:	f7ff fe0c 	bl	800054e <MCAL_GPIO_INIT>
}
 8000936:	e01b      	b.n	8000970 <USART_SetPins+0xb0>
	else if (USARTX == USART3)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <USART_SetPins+0xc4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d117      	bne.n	8000970 <USART_SetPins+0xb0>
		GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT_AF_PP;
 8000940:	2306      	movs	r3, #6
 8000942:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.GPIO_output_speed = GPIO_SPEED_10M;
 8000944:	2301      	movs	r3, #1
 8000946:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094c:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOB_PR, &GPIO_pinConfig);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <USART_SetPins+0xc8>)
 8000956:	f7ff fdfa 	bl	800054e <MCAL_GPIO_INIT>
		GPIO_pinConfig.GPIO_PinMode = GPIO_MODE_AF_INPUT;
 800095a:	2308      	movs	r3, #8
 800095c:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.GPIO_PinNumber = GPIO_PIN_11;
 800095e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000962:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_INIT(GPIOB_PR, &GPIO_pinConfig);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <USART_SetPins+0xc8>)
 800096c:	f7ff fdef 	bl	800054e <MCAL_GPIO_INIT>
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40013800 	.word	0x40013800
 800097c:	40010800 	.word	0x40010800
 8000980:	40004400 	.word	0x40004400
 8000984:	40004800 	.word	0x40004800
 8000988:	40010c00 	.word	0x40010c00

0800098c <USART_Send>:
 When receiving with the parity enabled, the value read in the MSB bit is the received parity
 bit*/


void USART_Send(USART_Typedef* USARTX, uint16_t *pTxBuffer,enum Polling_Mechanism PollingEn)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	4613      	mov	r3, r2
 8000998:	71fb      	strb	r3, [r7, #7]
This bit is set by hardware when the content of the TDR register has been transferred into
the shift register. An interrupt is generated if the TXEIE bit =1 in the USART_CR1 register. It
is cleared by a write to the USART_DR register.
0: Data is not transferred to the shift register
1: Data is transferred to the shift register)*/
	if (USARTX == USART1)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4a1f      	ldr	r2, [pc, #124]	; (8000a1c <USART_Send+0x90>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d10f      	bne.n	80009c2 <USART_Send+0x36>
	{
		if (PollingEn == Enable)
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d106      	bne.n	80009b6 <USART_Send+0x2a>
			while (!(USARTX->SR & (1 << 7)));
 80009a8:	bf00      	nop
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f9      	beq.n	80009aa <USART_Send+0x1e>

		if (Global_USART1Config->Payload_length == USART_DataLength9B) {
			USARTX->DR = (*pTxBuffer & (uint16_t)0x01FF);
		} else {
			USARTX->DR = (*pTxBuffer & (uint16_t)0xFF);
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	605a      	str	r2, [r3, #4]
			USARTX->DR = (*pTxBuffer & (uint16_t)0x01FF);
		} else {
			USARTX->DR = (*pTxBuffer & (uint16_t)0xFF);
		}
	}
}
 80009c0:	e026      	b.n	8000a10 <USART_Send+0x84>
	else if (USARTX == USART2)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <USART_Send+0x94>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d10f      	bne.n	80009ea <USART_Send+0x5e>
		if (PollingEn == Enable)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d106      	bne.n	80009de <USART_Send+0x52>
			while (!(USARTX->SR & (1 << 7)));
 80009d0:	bf00      	nop
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f9      	beq.n	80009d2 <USART_Send+0x46>
			USARTX->DR = (*pTxBuffer & (uint16_t)0xFF);
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	605a      	str	r2, [r3, #4]
}
 80009e8:	e012      	b.n	8000a10 <USART_Send+0x84>
	else if (USARTX == USART3)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <USART_Send+0x98>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d10e      	bne.n	8000a10 <USART_Send+0x84>
		if (PollingEn == Enable)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d106      	bne.n	8000a06 <USART_Send+0x7a>
			while (!(USARTX->SR & (1 << 7)));
 80009f8:	bf00      	nop
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <USART_Send+0x6e>
			USARTX->DR = (*pTxBuffer & (uint16_t)0xFF);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	605a      	str	r2, [r3, #4]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40004800 	.word	0x40004800

08000a28 <USART_Recieve>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [in] 		- pTxBuffer:
 * @param [in] 		- PollingEn: Enables or disables the polling mechanism
 * @retval 			- none
 */
void USART_Recieve(USART_Typedef* USARTX, uint16_t *pTxBuffer,enum Polling_Mechanism PollingEn) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	71fb      	strb	r3, [r7, #7]
	 * This bit is set by hardware when the content of the RDR shift register has been transferred to
	 * the USART_DR register.
	 * 0: Data is not received
1: Received data is ready to be read
	 */
	if (USARTX == USART1)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4a37      	ldr	r2, [pc, #220]	; (8000b18 <USART_Recieve+0xf0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d11f      	bne.n	8000a7e <USART_Recieve+0x56>
	{
		if (PollingEn == Enable)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d106      	bne.n	8000a52 <USART_Recieve+0x2a>
			while (!(USARTX->SR & (1 << 5)))
 8000a44:	bf00      	nop
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f9      	beq.n	8000a46 <USART_Recieve+0x1e>
			}

		} else 	//USART_DataLength =8B

		{
			if (Global_USART1Config->Parity != USART_Parity_None) {
 8000a52:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <USART_Recieve+0xf4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	7a9b      	ldrb	r3, [r3, #10]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d008      	beq.n	8000a6e <USART_Recieve+0x46>
				// If parity is enabled  then ignore the MSB bit8 is parity
				*((uint16_t *)pTxBuffer) = (USARTX->DR & (uint8_t)0x7F);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	801a      	strh	r2, [r3, #0]
						// case No parity
						*((uint16_t *)pTxBuffer) = (USARTX->DR & (uint8_t)0xFF);
					}
				}
			}
}
 8000a6c:	e04e      	b.n	8000b0c <USART_Recieve+0xe4>
				*((uint16_t *)pTxBuffer) = (USARTX->DR & (uint8_t)0xFF);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	801a      	strh	r2, [r3, #0]
}
 8000a7c:	e046      	b.n	8000b0c <USART_Recieve+0xe4>
	else if ((USARTX == USART2))
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4a27      	ldr	r2, [pc, #156]	; (8000b20 <USART_Recieve+0xf8>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d11f      	bne.n	8000ac6 <USART_Recieve+0x9e>
			if (PollingEn == Enable)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d106      	bne.n	8000a9a <USART_Recieve+0x72>
				while (!(USARTX->SR & (1 << 5)))
 8000a8c:	bf00      	nop
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f9      	beq.n	8000a8e <USART_Recieve+0x66>
				if (Global_USART2Config->Parity != USART_Parity_None) {
 8000a9a:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <USART_Recieve+0xfc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	7a9b      	ldrb	r3, [r3, #10]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d008      	beq.n	8000ab6 <USART_Recieve+0x8e>
					*((uint16_t *)pTxBuffer) = (USARTX->DR & (uint8_t)0x7F);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	801a      	strh	r2, [r3, #0]
}
 8000ab4:	e02a      	b.n	8000b0c <USART_Recieve+0xe4>
					*((uint16_t *)pTxBuffer) = (USARTX->DR & (uint8_t)0xFF);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	801a      	strh	r2, [r3, #0]
}
 8000ac4:	e022      	b.n	8000b0c <USART_Recieve+0xe4>
	else if ((USARTX == USART3))
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <USART_Recieve+0x100>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d11e      	bne.n	8000b0c <USART_Recieve+0xe4>
				if (PollingEn == Enable)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d106      	bne.n	8000ae2 <USART_Recieve+0xba>
					while (!(USARTX->SR & (1 << 5)))
 8000ad4:	bf00      	nop
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f9      	beq.n	8000ad6 <USART_Recieve+0xae>
					if (Global_USART3Config->Parity != USART_Parity_None) {
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <USART_Recieve+0x104>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	7a9b      	ldrb	r3, [r3, #10]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d008      	beq.n	8000afe <USART_Recieve+0xd6>
						*((uint16_t *)pTxBuffer) = (USARTX->DR & (uint8_t)0x7F);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	801a      	strh	r2, [r3, #0]
}
 8000afc:	e006      	b.n	8000b0c <USART_Recieve+0xe4>
						*((uint16_t *)pTxBuffer) = (USARTX->DR & (uint8_t)0xFF);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	801a      	strh	r2, [r3, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40013800 	.word	0x40013800
 8000b1c:	20000034 	.word	0x20000034
 8000b20:	40004400 	.word	0x40004400
 8000b24:	20000038 	.word	0x20000038
 8000b28:	40004800 	.word	0x40004800
 8000b2c:	2000003c 	.word	0x2000003c

08000b30 <USART1_IRQHandler>:
	while (!(USARTX->SR & (1 << 6)));
}

// ISR
//gets functions names from startup file
void USART1_IRQHandler(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	Global_USART1Config->P_CallBack_Fun();
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <USART1_IRQHandler+0x10>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	4798      	blx	r3
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000034 	.word	0x20000034

08000b44 <USART2_IRQHandler>:
void USART2_IRQHandler(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	Global_USART2Config->P_CallBack_Fun();
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <USART2_IRQHandler+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	4798      	blx	r3
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000038 	.word	0x20000038

08000b58 <USART3_IRQHandler>:
void USART3_IRQHandler(){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	Global_USART3Config->P_CallBack_Fun();
 8000b5c:	4b02      	ldr	r3, [pc, #8]	; (8000b68 <USART3_IRQHandler+0x10>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	4798      	blx	r3
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000003c 	.word	0x2000003c

08000b6c <__libc_init_array>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	2500      	movs	r5, #0
 8000b70:	4e0c      	ldr	r6, [pc, #48]	; (8000ba4 <__libc_init_array+0x38>)
 8000b72:	4c0d      	ldr	r4, [pc, #52]	; (8000ba8 <__libc_init_array+0x3c>)
 8000b74:	1ba4      	subs	r4, r4, r6
 8000b76:	10a4      	asrs	r4, r4, #2
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	d109      	bne.n	8000b90 <__libc_init_array+0x24>
 8000b7c:	f000 f81a 	bl	8000bb4 <_init>
 8000b80:	2500      	movs	r5, #0
 8000b82:	4e0a      	ldr	r6, [pc, #40]	; (8000bac <__libc_init_array+0x40>)
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <__libc_init_array+0x44>)
 8000b86:	1ba4      	subs	r4, r4, r6
 8000b88:	10a4      	asrs	r4, r4, #2
 8000b8a:	42a5      	cmp	r5, r4
 8000b8c:	d105      	bne.n	8000b9a <__libc_init_array+0x2e>
 8000b8e:	bd70      	pop	{r4, r5, r6, pc}
 8000b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b94:	4798      	blx	r3
 8000b96:	3501      	adds	r5, #1
 8000b98:	e7ee      	b.n	8000b78 <__libc_init_array+0xc>
 8000b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b9e:	4798      	blx	r3
 8000ba0:	3501      	adds	r5, #1
 8000ba2:	e7f2      	b.n	8000b8a <__libc_init_array+0x1e>
 8000ba4:	08000bcc 	.word	0x08000bcc
 8000ba8:	08000bcc 	.word	0x08000bcc
 8000bac:	08000bcc 	.word	0x08000bcc
 8000bb0:	08000bd0 	.word	0x08000bd0

08000bb4 <_init>:
 8000bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb6:	bf00      	nop
 8000bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bba:	bc08      	pop	{r3}
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	4770      	bx	lr

08000bc0 <_fini>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	bf00      	nop
 8000bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc6:	bc08      	pop	{r3}
 8000bc8:	469e      	mov	lr, r3
 8000bca:	4770      	bx	lr
