
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000658  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  00000d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001353  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    while (1) 
    {
		clearbit(DDRB,7);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 77       	andi	r24, 0x7F	; 127
  70:	87 bb       	out	0x17, r24	; 23
		setbit(PORTB,7);
  72:	88 b3       	in	r24, 0x18	; 24
  74:	80 68       	ori	r24, 0x80	; 128
  76:	88 bb       	out	0x18, r24	; 24
		if(Readbit(PINB,7) == 0)
  78:	b7 99       	sbic	0x16, 7	; 22
  7a:	f8 cf       	rjmp	.-16     	; 0x6c <main>
		{
			setbit(DDRA,0);
  7c:	8a b3       	in	r24, 0x1a	; 26
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	8a bb       	out	0x1a, r24	; 26
			setbit(PORTA,0);
  82:	8b b3       	in	r24, 0x1b	; 27
  84:	81 60       	ori	r24, 0x01	; 1
  86:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f e7       	ldi	r18, 0x7F	; 127
  8a:	8a e1       	ldi	r24, 0x1A	; 26
  8c:	96 e0       	ldi	r25, 0x06	; 6
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
			_delay_ms(2000);
			setbit(DDRA,1);
  9a:	8a b3       	in	r24, 0x1a	; 26
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	8a bb       	out	0x1a, r24	; 26
			setbit(PORTA,1);
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	2f e7       	ldi	r18, 0x7F	; 127
  a8:	8a e1       	ldi	r24, 0x1A	; 26
  aa:	96 e0       	ldi	r25, 0x06	; 6
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x40>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
			_delay_ms(2000);
			setbit(DDRA,2);
  b8:	8a b3       	in	r24, 0x1a	; 26
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	8a bb       	out	0x1a, r24	; 26
			setbit(PORTA,2);
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	9e e1       	ldi	r25, 0x1E	; 30
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x5e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x68>
  d4:	00 00       	nop
  d6:	ca cf       	rjmp	.-108    	; 0x6c <main>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
