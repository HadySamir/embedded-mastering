
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000040c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800053c  08000544  00010544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800053c  0800053c  00010544  2**0
                  CONTENTS
  4 .ARM          00000000  0800053c  0800053c  00010544  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800053c  08000544  00010544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800053c  0800053c  0001053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000540  08000540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000544  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000544  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010544  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001921  00000000  00000000  0001056d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000406  00000000  00000000  00011e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003fc  00000000  00000000  00012294  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b8  00000000  00000000  00012690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00012748  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001af8  00000000  00000000  000127d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000c75  00000000  00000000  000142d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000760e  00000000  00000000  00014f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001c553  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000218  00000000  00000000  0001c5d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000524 	.word	0x08000524

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000524 	.word	0x08000524

08000170 <Clock_init>:
//Mastering_Embedded System online diploma



void Clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	RCC_GPIOA_ENABLE();          // Enable Clock for GPIOA
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <Clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <Clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIB_ENABLE();          // Enable Clock for GPIOB
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <Clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <Clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:

void GPIO_init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t PIN;

	//GPIOA PA1 Floating input (reset state)

	PIN.Pin_Number = GPIO_Pin_1 ;
 800019e:	2302      	movs	r3, #2
 80001a0:	80bb      	strh	r3, [r7, #4]
	PIN.Pin_Mode = Pin_Mode_FLO ;
 80001a2:	2301      	movs	r3, #1
 80001a4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PIN);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	4814      	ldr	r0, [pc, #80]	; (80001fc <GPIO_init+0x64>)
 80001ac:	f000 f8f0 	bl	8000390 <MCAL_GPIO_Init>

	//GPIOA PA13 Floating input (reset state)
	PIN.Pin_Number = GPIO_Pin_13 ;
 80001b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b4:	80bb      	strh	r3, [r7, #4]
		PIN.Pin_Mode = Pin_Mode_FLO ;
 80001b6:	2301      	movs	r3, #1
 80001b8:	71bb      	strb	r3, [r7, #6]
		MCAL_GPIO_Init(GPIOA, &PIN);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	480f      	ldr	r0, [pc, #60]	; (80001fc <GPIO_init+0x64>)
 80001c0:	f000 f8e6 	bl	8000390 <MCAL_GPIO_Init>


	//GPIOA PB1 General purpose output push-pull max speed 10 MHz
		PIN.Pin_Number = GPIO_Pin_1;
 80001c4:	2302      	movs	r3, #2
 80001c6:	80bb      	strh	r3, [r7, #4]
				PIN.Pin_Mode = Pin_Mode_PP ;
 80001c8:	2304      	movs	r3, #4
 80001ca:	71bb      	strb	r3, [r7, #6]
				PIN.Pin_output_Speed = Pin_output_10 ;
 80001cc:	2301      	movs	r3, #1
 80001ce:	71fb      	strb	r3, [r7, #7]
				MCAL_GPIO_Init(GPIOB, &PIN);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	480a      	ldr	r0, [pc, #40]	; (8000200 <GPIO_init+0x68>)
 80001d6:	f000 f8db 	bl	8000390 <MCAL_GPIO_Init>
          //max speed 10 MHz


	//GPIOA PB13 General purpose output push-pull max speed 10 MHz
				PIN.Pin_Number = GPIO_Pin_13;
 80001da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001de:	80bb      	strh	r3, [r7, #4]
								PIN.Pin_Mode = Pin_Mode_PP ;
 80001e0:	2304      	movs	r3, #4
 80001e2:	71bb      	strb	r3, [r7, #6]
								PIN.Pin_output_Speed = Pin_output_10 ;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
								MCAL_GPIO_Init(GPIOB, &PIN);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <GPIO_init+0x68>)
 80001ee:	f000 f8cf 	bl	8000390 <MCAL_GPIO_Init>


}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    int delay = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
	Clock_init();
 800020e:	f7ff ffaf 	bl	8000170 <Clock_init>
	GPIO_init();
 8000212:	f7ff ffc1 	bl	8000198 <GPIO_init>

	while(1)
	{
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_Pin_1) == 0)//press
 8000216:	2102      	movs	r1, #2
 8000218:	4815      	ldr	r0, [pc, #84]	; (8000270 <main+0x6c>)
 800021a:	f000 f939 	bl	8000490 <MCAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d10b      	bne.n	800023c <main+0x38>
		{
			 MCAL_GPIO_TogglePin ( GPIOB , GPIO_Pin_1 );
 8000224:	2102      	movs	r1, #2
 8000226:	4813      	ldr	r0, [pc, #76]	; (8000274 <main+0x70>)
 8000228:	f000 f946 	bl	80004b8 <MCAL_GPIO_TogglePin>
			while(MCAL_GPIO_ReadPin(GPIOA, GPIO_Pin_1) == 0);//single press
 800022c:	bf00      	nop
 800022e:	2102      	movs	r1, #2
 8000230:	480f      	ldr	r0, [pc, #60]	; (8000270 <main+0x6c>)
 8000232:	f000 f92d 	bl	8000490 <MCAL_GPIO_ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d0f8      	beq.n	800022e <main+0x2a>

		}
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_Pin_13)  == 1)//press
 800023c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <main+0x6c>)
 8000242:	f000 f925 	bl	8000490 <MCAL_GPIO_ReadPin>
 8000246:	4603      	mov	r3, r0
 8000248:	2b01      	cmp	r3, #1
 800024a:	d1e4      	bne.n	8000216 <main+0x12>
				{
					 MCAL_GPIO_TogglePin ( GPIOB , GPIO_Pin_13);//Multi pressing
 800024c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <main+0x70>)
 8000252:	f000 f931 	bl	80004b8 <MCAL_GPIO_TogglePin>
		            for (delay = 0 ; delay < 10000 ; delay ++);
 8000256:	2300      	movs	r3, #0
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	e002      	b.n	8000262 <main+0x5e>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3301      	adds	r3, #1
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f242 720f 	movw	r2, #9999	; 0x270f
 8000268:	4293      	cmp	r3, r2
 800026a:	ddf7      	ble.n	800025c <main+0x58>
		if(MCAL_GPIO_ReadPin(GPIOA, GPIO_Pin_1) == 0)//press
 800026c:	e7d3      	b.n	8000216 <main+0x12>
 800026e:	bf00      	nop
 8000270:	40010800 	.word	0x40010800
 8000274:	40010c00 	.word	0x40010c00

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800027c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	; (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	; (80002c4 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 f919 	bl	80004dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ffab 	bl	8000204 <main>

080002ae <LoopForever>:

LoopForever:
    b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002bc:	08000544 	.word	0x08000544
  ldr r2, =_sbss
 80002c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c4:	2000001c 	.word	0x2000001c

080002c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_2_IRQHandler>

080002ca <get_CRLH_position>:
* Note					 - none
*/

#include"Stm32_f103C6_Drivers.h"

uint8_t get_CRLH_position(uint16_t PinNumber){
 80002ca:	b480      	push	{r7}
 80002cc:	b083      	sub	sp, #12
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	4603      	mov	r3, r0
 80002d2:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	2b80      	cmp	r3, #128	; 0x80
 80002d8:	d042      	beq.n	8000360 <get_CRLH_position+0x96>
 80002da:	2b80      	cmp	r3, #128	; 0x80
 80002dc:	dc11      	bgt.n	8000302 <get_CRLH_position+0x38>
 80002de:	2b08      	cmp	r3, #8
 80002e0:	d036      	beq.n	8000350 <get_CRLH_position+0x86>
 80002e2:	2b08      	cmp	r3, #8
 80002e4:	dc06      	bgt.n	80002f4 <get_CRLH_position+0x2a>
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d02e      	beq.n	8000348 <get_CRLH_position+0x7e>
 80002ea:	2b04      	cmp	r3, #4
 80002ec:	d02e      	beq.n	800034c <get_CRLH_position+0x82>
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d028      	beq.n	8000344 <get_CRLH_position+0x7a>
 80002f2:	e047      	b.n	8000384 <get_CRLH_position+0xba>
 80002f4:	2b20      	cmp	r3, #32
 80002f6:	d02f      	beq.n	8000358 <get_CRLH_position+0x8e>
 80002f8:	2b40      	cmp	r3, #64	; 0x40
 80002fa:	d02f      	beq.n	800035c <get_CRLH_position+0x92>
 80002fc:	2b10      	cmp	r3, #16
 80002fe:	d029      	beq.n	8000354 <get_CRLH_position+0x8a>
 8000300:	e040      	b.n	8000384 <get_CRLH_position+0xba>
 8000302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000306:	d033      	beq.n	8000370 <get_CRLH_position+0xa6>
 8000308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800030c:	dc09      	bgt.n	8000322 <get_CRLH_position+0x58>
 800030e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000312:	d029      	beq.n	8000368 <get_CRLH_position+0x9e>
 8000314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000318:	d028      	beq.n	800036c <get_CRLH_position+0xa2>
 800031a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800031e:	d021      	beq.n	8000364 <get_CRLH_position+0x9a>
 8000320:	e030      	b.n	8000384 <get_CRLH_position+0xba>
 8000322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000326:	d027      	beq.n	8000378 <get_CRLH_position+0xae>
 8000328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800032c:	dc03      	bgt.n	8000336 <get_CRLH_position+0x6c>
 800032e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000332:	d01f      	beq.n	8000374 <get_CRLH_position+0xaa>
 8000334:	e026      	b.n	8000384 <get_CRLH_position+0xba>
 8000336:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800033a:	d01f      	beq.n	800037c <get_CRLH_position+0xb2>
 800033c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000340:	d01e      	beq.n	8000380 <get_CRLH_position+0xb6>
 8000342:	e01f      	b.n	8000384 <get_CRLH_position+0xba>
	case  GPIO_Pin_0:
		return 0;
 8000344:	2300      	movs	r3, #0
 8000346:	e01e      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_1:
		return 4;
 8000348:	2304      	movs	r3, #4
 800034a:	e01c      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_2:
		return 8;
 800034c:	2308      	movs	r3, #8
 800034e:	e01a      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_3:
		return 12;
 8000350:	230c      	movs	r3, #12
 8000352:	e018      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_4:
		return 16;
 8000354:	2310      	movs	r3, #16
 8000356:	e016      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_5:
		return 20;
 8000358:	2314      	movs	r3, #20
 800035a:	e014      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_6:
		return 24;
 800035c:	2318      	movs	r3, #24
 800035e:	e012      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_7:
		return 28;
 8000360:	231c      	movs	r3, #28
 8000362:	e010      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_8:
		return 0;
 8000364:	2300      	movs	r3, #0
 8000366:	e00e      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_9:
		return 4;
 8000368:	2304      	movs	r3, #4
 800036a:	e00c      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_10:
		return 8;
 800036c:	2308      	movs	r3, #8
 800036e:	e00a      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_11:
		return 12;
 8000370:	230c      	movs	r3, #12
 8000372:	e008      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_12:
		return 16;
 8000374:	2310      	movs	r3, #16
 8000376:	e006      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_13:
		return 20;
 8000378:	2314      	movs	r3, #20
 800037a:	e004      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_14:
		return 24;
 800037c:	2318      	movs	r3, #24
 800037e:	e002      	b.n	8000386 <get_CRLH_position+0xbc>
		break;

	case  GPIO_Pin_15:
		return 28;
 8000380:	231c      	movs	r3, #28
 8000382:	e000      	b.n	8000386 <get_CRLH_position+0xbc>
		break;
	}


	return 1;
 8000384:	2301      	movs	r3, #1
}
 8000386:	4618      	mov	r0, r3
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <MCAL_GPIO_Init>:


void MCAL_GPIO_Init (GPIO_Typedef* GPIOx ,GPIO_Pinconfig_t* Pinconfig )
{
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]

	volatile uint32_t * configReg = NULL;
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
		uint8_t pinMode = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	73fb      	strb	r3, [r7, #15]

		configReg = (Pinconfig->Pin_Number > GPIO_Pin_8) ? &GPIOx->GPIO_CRH : &GPIOx->GPIO_CRL;
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003aa:	d902      	bls.n	80003b2 <MCAL_GPIO_Init+0x22>
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3304      	adds	r3, #4
 80003b0:	e000      	b.n	80003b4 <MCAL_GPIO_Init+0x24>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	60bb      	str	r3, [r7, #8]

		*configReg &= ~(0xf << get_CRLH_position(Pinconfig->Pin_Number));
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	881b      	ldrh	r3, [r3, #0]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff85 	bl	80002ca <get_CRLH_position>
 80003c0:	4603      	mov	r3, r0
 80003c2:	461a      	mov	r2, r3
 80003c4:	230f      	movs	r3, #15
 80003c6:	4093      	lsls	r3, r2
 80003c8:	43da      	mvns	r2, r3
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	401a      	ands	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	601a      	str	r2, [r3, #0]

		if((Pinconfig->Pin_Mode == Pin_Mode_AF_OD) || (Pinconfig->Pin_Mode == Pin_Mode_AF_PP) ||
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	789b      	ldrb	r3, [r3, #2]
 80003d8:	2b07      	cmp	r3, #7
 80003da:	d00b      	beq.n	80003f4 <MCAL_GPIO_Init+0x64>
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	789b      	ldrb	r3, [r3, #2]
 80003e0:	2b06      	cmp	r3, #6
 80003e2:	d007      	beq.n	80003f4 <MCAL_GPIO_Init+0x64>
		   (Pinconfig->Pin_Mode == Pin_Mode_OD) || (Pinconfig->Pin_Mode == Pin_Mode_PP))
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	789b      	ldrb	r3, [r3, #2]
		if((Pinconfig->Pin_Mode == Pin_Mode_AF_OD) || (Pinconfig->Pin_Mode == Pin_Mode_AF_PP) ||
 80003e8:	2b05      	cmp	r3, #5
 80003ea:	d003      	beq.n	80003f4 <MCAL_GPIO_Init+0x64>
		   (Pinconfig->Pin_Mode == Pin_Mode_OD) || (Pinconfig->Pin_Mode == Pin_Mode_PP))
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	789b      	ldrb	r3, [r3, #2]
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d10e      	bne.n	8000412 <MCAL_GPIO_Init+0x82>
		{

			pinMode = ((((Pinconfig->Pin_Mode - 4) << 2) | (Pinconfig->Pin_output_Speed)) & 0x0F);
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	789b      	ldrb	r3, [r3, #2]
 80003f8:	3b04      	subs	r3, #4
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	b25a      	sxtb	r2, r3
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	78db      	ldrb	r3, [r3, #3]
 8000402:	b25b      	sxtb	r3, r3
 8000404:	4313      	orrs	r3, r2
 8000406:	b25b      	sxtb	r3, r3
 8000408:	b2db      	uxtb	r3, r3
 800040a:	f003 030f 	and.w	r3, r3, #15
 800040e:	73fb      	strb	r3, [r7, #15]
 8000410:	e02c      	b.n	800046c <MCAL_GPIO_Init+0xdc>


		}else{

			if((Pinconfig->Pin_Mode == Pin_Mode_FLO) || (Pinconfig->Pin_Mode == Pin_Mode_ANALOG)){
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	789b      	ldrb	r3, [r3, #2]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d003      	beq.n	8000422 <MCAL_GPIO_Init+0x92>
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	789b      	ldrb	r3, [r3, #2]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d107      	bne.n	8000432 <MCAL_GPIO_Init+0xa2>

				pinMode = ((((Pinconfig->Pin_Mode) << 2) | 0x0) & 0x0F);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	789b      	ldrb	r3, [r3, #2]
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	b2db      	uxtb	r3, r3
 800042a:	f003 030f 	and.w	r3, r3, #15
 800042e:	73fb      	strb	r3, [r7, #15]
 8000430:	e01c      	b.n	800046c <MCAL_GPIO_Init+0xdc>

			}else if (Pinconfig->Pin_Mode == Pin_Mode_AF_INPUT){
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	2b08      	cmp	r3, #8
 8000438:	d102      	bne.n	8000440 <MCAL_GPIO_Init+0xb0>

				pinMode = ((((Pin_Mode_FLO) << 2) | 0x0) & 0x0F);
 800043a:	2304      	movs	r3, #4
 800043c:	73fb      	strb	r3, [r7, #15]
 800043e:	e015      	b.n	800046c <MCAL_GPIO_Init+0xdc>

			}else{

				pinMode = ((((Pin_Mode_PU) << 2) | 0x0) & 0x0F);
 8000440:	2308      	movs	r3, #8
 8000442:	73fb      	strb	r3, [r7, #15]

				if(Pinconfig->Pin_Mode == Pin_Mode_PU){
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	789b      	ldrb	r3, [r3, #2]
 8000448:	2b02      	cmp	r3, #2
 800044a:	d107      	bne.n	800045c <MCAL_GPIO_Init+0xcc>
					GPIOx->GPIO_ODR |= Pinconfig->Pin_Number;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	683a      	ldr	r2, [r7, #0]
 8000452:	8812      	ldrh	r2, [r2, #0]
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	e007      	b.n	800046c <MCAL_GPIO_Init+0xdc>
				}else{
					GPIOx->GPIO_ODR &= ~(Pinconfig->Pin_Number);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	683a      	ldr	r2, [r7, #0]
 8000462:	8812      	ldrh	r2, [r2, #0]
 8000464:	43d2      	mvns	r2, r2
 8000466:	401a      	ands	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	60da      	str	r2, [r3, #12]
				}

			}
		}

		*configReg |= (pinMode << get_CRLH_position(Pinconfig->Pin_Number));
 800046c:	7bfc      	ldrb	r4, [r7, #15]
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff29 	bl	80002ca <get_CRLH_position>
 8000478:	4603      	mov	r3, r0
 800047a:	fa04 f203 	lsl.w	r2, r4, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	431a      	orrs	r2, r3
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	601a      	str	r2, [r3, #0]
	}
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bd90      	pop	{r4, r7, pc}

08000490 <MCAL_GPIO_ReadPin>:
* Note					 - none
*/


uint8_t MCAL_GPIO_ReadPin (GPIO_Typedef* GPIOx , uint16_t PinNumber )
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	807b      	strh	r3, [r7, #2]


	return (((GPIOx->GPIO_IDR) & PinNumber) != 0) ? 1 : 0;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	689a      	ldr	r2, [r3, #8]
 80004a0:	887b      	ldrh	r3, [r7, #2]
 80004a2:	4013      	ands	r3, r2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf14      	ite	ne
 80004a8:	2301      	movne	r3, #1
 80004aa:	2300      	moveq	r3, #0
 80004ac:	b2db      	uxtb	r3, r3



}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <MCAL_GPIO_TogglePin>:




void MCAL_GPIO_TogglePin (GPIO_Typedef* GPIOx , uint16_t PinNumber )
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	807b      	strh	r3, [r7, #2]


	GPIOx->GPIO_ODR ^= (uint32_t) PinNumber;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	887b      	ldrh	r3, [r7, #2]
 80004ca:	405a      	eors	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	60da      	str	r2, [r3, #12]




}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
	...

080004dc <__libc_init_array>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2500      	movs	r5, #0
 80004e0:	4e0c      	ldr	r6, [pc, #48]	; (8000514 <__libc_init_array+0x38>)
 80004e2:	4c0d      	ldr	r4, [pc, #52]	; (8000518 <__libc_init_array+0x3c>)
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	10a4      	asrs	r4, r4, #2
 80004e8:	42a5      	cmp	r5, r4
 80004ea:	d109      	bne.n	8000500 <__libc_init_array+0x24>
 80004ec:	f000 f81a 	bl	8000524 <_init>
 80004f0:	2500      	movs	r5, #0
 80004f2:	4e0a      	ldr	r6, [pc, #40]	; (800051c <__libc_init_array+0x40>)
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <__libc_init_array+0x44>)
 80004f6:	1ba4      	subs	r4, r4, r6
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	42a5      	cmp	r5, r4
 80004fc:	d105      	bne.n	800050a <__libc_init_array+0x2e>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000504:	4798      	blx	r3
 8000506:	3501      	adds	r5, #1
 8000508:	e7ee      	b.n	80004e8 <__libc_init_array+0xc>
 800050a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800050e:	4798      	blx	r3
 8000510:	3501      	adds	r5, #1
 8000512:	e7f2      	b.n	80004fa <__libc_init_array+0x1e>
 8000514:	0800053c 	.word	0x0800053c
 8000518:	0800053c 	.word	0x0800053c
 800051c:	0800053c 	.word	0x0800053c
 8000520:	08000540 	.word	0x08000540

08000524 <_init>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr

08000530 <_fini>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr
