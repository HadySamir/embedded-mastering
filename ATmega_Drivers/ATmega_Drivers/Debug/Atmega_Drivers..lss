
ECU1_EntranceGate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000107e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  0000107e  00001112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800104  00800104  000011b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038be  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001397  00000000  00000000  00004e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f08  00000000  00000000  00006209  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000091c  00000000  00000000  00008114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016f5  00000000  00000000  00008a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000237b  00000000  00000000  0000a125  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  0000c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_1>
       8:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__vector_10>
      2c:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 32       	cpi	r26, 0x2F	; 47
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 04 	call	0x814	; 0x814 <main>
      8a:	0c 94 3d 08 	jmp	0x107a	; 0x107a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_voidMainScreen>:
 * @brief This Function is used to display the main screen
 * 
 */
static void LCD_voidMainScreen()
{
	LCD_SetCursor(&myLCD, CURS_OFF ) ;
      92:	6c e0       	ldi	r22, 0x0C	; 12
      94:	84 e0       	ldi	r24, 0x04	; 4
      96:	91 e0       	ldi	r25, 0x01	; 1
      98:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_SetCursor>
	LCD_Clear(&myLCD);
      9c:	84 e0       	ldi	r24, 0x04	; 4
      9e:	91 e0       	ldi	r25, 0x01	; 1
      a0:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_Clear>
	LCD_SendString(&myLCD,addString("Entrance Gate"));
      a4:	6e e7       	ldi	r22, 0x7E	; 126
      a6:	70 e0       	ldi	r23, 0x00	; 0
      a8:	84 e0       	ldi	r24, 0x04	; 4
      aa:	91 e0       	ldi	r25, 0x01	; 1
      ac:	0e 94 43 03 	call	0x686	; 0x686 <LCD_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b0:	8b e7       	ldi	r24, 0x7B	; 123
      b2:	92 e9       	ldi	r25, 0x92	; 146
      b4:	01 97       	sbiw	r24, 0x01	; 1
      b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_voidMainScreen+0x22>
      b8:	00 c0       	rjmp	.+0      	; 0xba <LCD_voidMainScreen+0x28>
      ba:	00 00       	nop
	_delay_ms(LCD_WAITING_TIME);
	LCD_SetDisplayState(&myLCD,DISP_OFF);
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	84 e0       	ldi	r24, 0x04	; 4
      c0:	91 e0       	ldi	r25, 0x01	; 1
      c2:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_SetDisplayState>
      c6:	08 95       	ret

000000c8 <LCD_voidSetup>:
 * @brief This function is used to initialize the LCD driver 
 * 
 */
static void LCD_voidSetup(void)
{
	myLCD.LCD_SIZE_Rows = 2 ;
      c8:	e4 e0       	ldi	r30, 0x04	; 4
      ca:	f1 e0       	ldi	r31, 0x01	; 1
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	80 83       	st	Z, r24
	myLCD.LCD_SIZE_Cols = 16 ;
      d0:	80 e1       	ldi	r24, 0x10	; 16
      d2:	81 83       	std	Z+1, r24	; 0x01
	myLCD.LCD_PortPins = LCD_PortPin ;
      d4:	80 e6       	ldi	r24, 0x60	; 96
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	93 83       	std	Z+3, r25	; 0x03
      da:	82 83       	std	Z+2, r24	; 0x02
	LCD_Init(&myLCD);
      dc:	cf 01       	movw	r24, r30
      de:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCD_Init>
	/*	Main Screen	*/
	LCD_voidMainScreen();
      e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_voidMainScreen>
      e6:	08 95       	ret

000000e8 <Buzzer>:
 * @brief This function is used to make  beep sound 
 * 
 * @param x number of repeated beep sound.
 */
static void Buzzer(u8 x)
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	d8 2f       	mov	r29, r24
	u8 LOC_u8Counter = 0 ;
      ee:	c0 e0       	ldi	r28, 0x00	; 0
	for(LOC_u8Counter ; LOC_u8Counter<x ; LOC_u8Counter++)
      f0:	17 c0       	rjmp	.+46     	; 0x120 <Buzzer+0x38>
	{
		GPIO_SetPinValue(PORTC,PIN6,HIGH);
      f2:	41 e0       	ldi	r20, 0x01	; 1
      f4:	66 e0       	ldi	r22, 0x06	; 6
      f6:	82 e0       	ldi	r24, 0x02	; 2
      f8:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
      fc:	87 ea       	ldi	r24, 0xA7	; 167
      fe:	91 e6       	ldi	r25, 0x61	; 97
     100:	01 97       	sbiw	r24, 0x01	; 1
     102:	f1 f7       	brne	.-4      	; 0x100 <Buzzer+0x18>
     104:	00 c0       	rjmp	.+0      	; 0x106 <Buzzer+0x1e>
     106:	00 00       	nop
		_delay_ms(100);
		GPIO_SetPinValue(PORTC,PIN6,LOW);
     108:	40 e0       	ldi	r20, 0x00	; 0
     10a:	66 e0       	ldi	r22, 0x06	; 6
     10c:	82 e0       	ldi	r24, 0x02	; 2
     10e:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     112:	87 ea       	ldi	r24, 0xA7	; 167
     114:	91 e6       	ldi	r25, 0x61	; 97
     116:	01 97       	sbiw	r24, 0x01	; 1
     118:	f1 f7       	brne	.-4      	; 0x116 <Buzzer+0x2e>
     11a:	00 c0       	rjmp	.+0      	; 0x11c <Buzzer+0x34>
     11c:	00 00       	nop
 * @param x number of repeated beep sound.
 */
static void Buzzer(u8 x)
{
	u8 LOC_u8Counter = 0 ;
	for(LOC_u8Counter ; LOC_u8Counter<x ; LOC_u8Counter++)
     11e:	cf 5f       	subi	r28, 0xFF	; 255
     120:	cd 17       	cp	r28, r29
     122:	38 f3       	brcs	.-50     	; 0xf2 <Buzzer+0xa>
		GPIO_SetPinValue(PORTC,PIN6,HIGH);
		_delay_ms(100);
		GPIO_SetPinValue(PORTC,PIN6,LOW);
		_delay_ms(100);		
	}	
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <System_voidStates>:
 * @param copy_u8Selection Select one of 0 or 1
 * 							0 --> For Valid ID
 * 							1 --> For Invalid ID
 */
static void System_voidStates(u8 copy_u8Selection)
{
     12a:	cf 93       	push	r28
     12c:	c8 2f       	mov	r28, r24
	LCD_SetCursor(&myLCD, CURS_OFF ) ;
     12e:	6c e0       	ldi	r22, 0x0C	; 12
     130:	84 e0       	ldi	r24, 0x04	; 4
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCD_SetCursor>
	LCD_Clear(&myLCD);
     138:	84 e0       	ldi	r24, 0x04	; 4
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LCD_Clear>
	LCD_SendString(&myLCD,addString("Entrance Gate"));
     140:	6e e7       	ldi	r22, 0x7E	; 126
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	84 e0       	ldi	r24, 0x04	; 4
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	0e 94 43 03 	call	0x686	; 0x686 <LCD_SendString>
	LCD_GotoXY(&myLCD,0,1);
     14c:	41 e0       	ldi	r20, 0x01	; 1
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	84 e0       	ldi	r24, 0x04	; 4
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	0e 94 69 03 	call	0x6d2	; 0x6d2 <LCD_GotoXY>
	switch(copy_u8Selection)
     158:	cc 23       	and	r28, r28
     15a:	19 f0       	breq	.+6      	; 0x162 <System_voidStates+0x38>
     15c:	c1 30       	cpi	r28, 0x01	; 1
     15e:	39 f1       	breq	.+78     	; 0x1ae <System_voidStates+0x84>
     160:	4c c0       	rjmp	.+152    	; 0x1fa <System_voidStates+0xd0>
	{
		case 0 : 
		GPIO_SetPinValue(GREEN_LED, HIGH);
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	67 e0       	ldi	r22, 0x07	; 7
     166:	82 e0       	ldi	r24, 0x02	; 2
     168:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
		GPIO_SetPinValue(RED_LED, LOW);
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	62 e0       	ldi	r22, 0x02	; 2
     170:	83 e0       	ldi	r24, 0x03	; 3
     172:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
		LCD_SendString(&myLCD,addString("Your ID is Valid "));	
     176:	6c e8       	ldi	r22, 0x8C	; 140
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	84 e0       	ldi	r24, 0x04	; 4
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 43 03 	call	0x686	; 0x686 <LCD_SendString>
     182:	8f e4       	ldi	r24, 0x4F	; 79
     184:	93 ec       	ldi	r25, 0xC3	; 195
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <System_voidStates+0x5c>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <System_voidStates+0x62>
     18c:	00 00       	nop
		_delay_ms(200);
		GPIO_SetPinValue(GREEN_LED, LOW);
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	67 e0       	ldi	r22, 0x07	; 7
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
		GPIO_SetPinValue(RED_LED, LOW);
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	62 e0       	ldi	r22, 0x02	; 2
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
		LCD_SetDisplayState(&myLCD,DISP_OFF);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	84 e0       	ldi	r24, 0x04	; 4
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_SetDisplayState>
		break ; 
     1ac:	26 c0       	rjmp	.+76     	; 0x1fa <System_voidStates+0xd0>
		case 1 : 
		GPIO_SetPinValue(GREEN_LED, LOW);
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	67 e0       	ldi	r22, 0x07	; 7
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
		GPIO_SetPinValue(RED_LED, HIGH);
     1b8:	41 e0       	ldi	r20, 0x01	; 1
     1ba:	62 e0       	ldi	r22, 0x02	; 2
     1bc:	83 e0       	ldi	r24, 0x03	; 3
     1be:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
		LCD_SendString(&myLCD,addString("Invalid ID"));
     1c2:	6e e9       	ldi	r22, 0x9E	; 158
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	84 e0       	ldi	r24, 0x04	; 4
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	0e 94 43 03 	call	0x686	; 0x686 <LCD_SendString>
		Buzzer(3);
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	0e 94 74 00 	call	0xe8	; 0xe8 <Buzzer>
		GPIO_SetPinValue(GREEN_LED, LOW);
     1d4:	40 e0       	ldi	r20, 0x00	; 0
     1d6:	67 e0       	ldi	r22, 0x07	; 7
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
		GPIO_SetPinValue(RED_LED, LOW);
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	62 e0       	ldi	r22, 0x02	; 2
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
		LCD_SetDisplayState(&myLCD,DISP_OFF);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	0e 94 5f 03 	call	0x6be	; 0x6be <LCD_SetDisplayState>
		USART_SendString((u8*)"\r\n***** ENTER RFID CARD *****\r\n");
     1f2:	89 ea       	ldi	r24, 0xA9	; 169
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 ac 07 	call	0xf58	; 0xf58 <USART_SendString>
		break ; 
		default : break ; 
	}

}
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <SetupApp>:
/*				MAIN FCNs				*/
void SetupApp(void) 
{
	/*	MCAL INIT	*/
	// GPIO 
	GPIO_Init(); 
     1fe:	0e 94 84 04 	call	0x908	; 0x908 <GPIO_Init>
	GPIO_SetPinDirection(PORTA,PIN0,OUTPUT); //	For Trigger Master 
     202:	41 e0       	ldi	r20, 0x01	; 1
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(PORTC,PIN6,OUTPUT); // For Buzzer
     20c:	41 e0       	ldi	r20, 0x01	; 1
     20e:	66 e0       	ldi	r22, 0x06	; 6
     210:	82 e0       	ldi	r24, 0x02	; 2
     212:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(GREEN_LED,OUTPUT); // For Green Led
     216:	41 e0       	ldi	r20, 0x01	; 1
     218:	67 e0       	ldi	r22, 0x07	; 7
     21a:	82 e0       	ldi	r24, 0x02	; 2
     21c:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(RED_LED,OUTPUT); // For Red Led 
     220:	41 e0       	ldi	r20, 0x01	; 1
     222:	62 e0       	ldi	r22, 0x02	; 2
     224:	83 e0       	ldi	r24, 0x03	; 3
     226:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
	

	
	// SPI
	GPIO_SPI_SlaveInit();
     22a:	0e 94 44 06 	call	0xc88	; 0xc88 <GPIO_SPI_SlaveInit>
	SPI_Init(&mySPI);
     22e:	8c e6       	ldi	r24, 0x6C	; 108
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <SPI_Init>
	
	/*	HAL Init	*/
	PIR_Init(); 
     236:	0e 94 8b 03 	call	0x716	; 0x716 <PIR_Init>
	
	RFID_Init();
     23a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <RFID_Init>
	RFID_GetData_(RFID_Callback);
     23e:	8d ea       	ldi	r24, 0xAD	; 173
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <RFID_GetData_>
	
	Gate_Init(); 
     246:	0e 94 b0 01 	call	0x360	; 0x360 <Gate_Init>
	
	LCD_voidSetup();
     24a:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_voidSetup>
	USART_SendString((u8*)"\r\n***** ENTRANCE GATE *****\r\n*****ENTER RFID CARD *****\r\n");
     24e:	89 ec       	ldi	r24, 0xC9	; 201
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 ac 07 	call	0xf58	; 0xf58 <USART_SendString>

	
	
	/*	Global Interrupt	*/
	ENABLE_GLOBAL_INTERRUPT();
     256:	8f b7       	in	r24, 0x3f	; 63
     258:	80 68       	ori	r24, 0x80	; 128
     25a:	8f bf       	out	0x3f, r24	; 63
     25c:	08 95       	ret

0000025e <AppLoop>:
}

void AppLoop(void) 
{
	// Stuck Here Until Get Valid ID
	while(Glob_ID_Valid !=  VALID_ID)
     25e:	02 c0       	rjmp	.+4      	; 0x264 <AppLoop+0x6>
	{
		CloseGate() ;
     260:	0e 94 c9 01 	call	0x392	; 0x392 <CloseGate>
}

void AppLoop(void) 
{
	// Stuck Here Until Get Valid ID
	while(Glob_ID_Valid !=  VALID_ID)
     264:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <Glob_ID_Valid>
     268:	81 33       	cpi	r24, 0x31	; 49
     26a:	d1 f7       	brne	.-12     	; 0x260 <AppLoop+0x2>
		CloseGate() ;
	}
	// If Glob_ID_Valid == VALID_ID
	{
		/* Disable Interrupts	*/
		DISABLE_GLOBAL_INTERRUPT();
     26c:	8f b7       	in	r24, 0x3f	; 63
     26e:	8f 77       	andi	r24, 0x7F	; 127
     270:	8f bf       	out	0x3f, r24	; 63
		
		OpenGate() ; 
     272:	0e 94 bf 01 	call	0x37e	; 0x37e <OpenGate>
		while(PIR_u8ExistMovement() == 1) ; 
     276:	0e 94 91 03 	call	0x722	; 0x722 <PIR_u8ExistMovement>
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	e1 f3       	breq	.-8      	; 0x276 <AppLoop+0x18>
		Glob_ID_Valid =  NOT_VALID_ID ; 
     27e:	80 e3       	ldi	r24, 0x30	; 48
     280:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Glob_ID_Valid>
		/*	Clear Any Pending Flag of USART	*/
		USART_ClearFlags();
     284:	0e 94 c7 07 	call	0xf8e	; 0xf8e <USART_ClearFlags>
		/* Renable Interrupts	*/ 
		ENABLE_GLOBAL_INTERRUPT();
     288:	8f b7       	in	r24, 0x3f	; 63
     28a:	80 68       	ori	r24, 0x80	; 128
     28c:	8f bf       	out	0x3f, r24	; 63
		USART_SendString((u8*)"\r\n***** ENTER RFID CARD *****\r\n");
     28e:	89 ea       	ldi	r24, 0xA9	; 169
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 ac 07 	call	0xf58	; 0xf58 <USART_SendString>
     296:	08 95       	ret

00000298 <APP_IsValidID>:
	APP_voidSendStringThroughSPI(ptr_ID) ;
	APP_IsValidID();	  
}

void APP_IsValidID(void)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	1f 92       	push	r1
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
	ID_Check_t LOC_Result = NOT_VALID_ID ; 
     2a2:	80 e3       	ldi	r24, 0x30	; 48
     2a4:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		SPI_ByteExchangeAsynch(VALID_ID_SYMBOL , &LOC_Result);
     2a6:	be 01       	movw	r22, r28
     2a8:	6f 5f       	subi	r22, 0xFF	; 255
     2aa:	7f 4f       	sbci	r23, 0xFF	; 255
     2ac:	84 e2       	ldi	r24, 0x24	; 36
     2ae:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_ByteExchangeAsynch>
	}while(!( LOC_Result == '1' || LOC_Result == '0') );
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	90 ed       	ldi	r25, 0xD0	; 208
     2b6:	98 0f       	add	r25, r24
     2b8:	92 30       	cpi	r25, 0x02	; 2
     2ba:	a8 f7       	brcc	.-22     	; 0x2a6 <APP_IsValidID+0xe>
	Glob_ID_Valid = LOC_Result ; 
     2bc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <Glob_ID_Valid>
	(Glob_ID_Valid == VALID_ID) ? (System_voidStates(0)) : (System_voidStates(1)) ; 
     2c0:	81 33       	cpi	r24, 0x31	; 49
     2c2:	21 f4       	brne	.+8      	; 0x2cc <APP_IsValidID+0x34>
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 95 00 	call	0x12a	; 0x12a <System_voidStates>
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <APP_IsValidID+0x3a>
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	0e 94 95 00 	call	0x12a	; 0x12a <System_voidStates>

}
     2d2:	0f 90       	pop	r0
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <APP_voidSendStringThroughSPI>:
void APP_voidSendStringThroughSPI(u8 *ptr_String)
{
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	1f 92       	push	r1
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	6c 01       	movw	r12, r24
	u8 LOC_u8DummyData = 0 ; 
     2f0:	19 82       	std	Y+1, r1	; 0x01
	u8 i = 0;
     2f2:	f1 2c       	mov	r15, r1
	while(ptr_String[i] != '\0' )
     2f4:	0b c0       	rjmp	.+22     	; 0x30c <APP_voidSendStringThroughSPI+0x32>
	{
		do
		{
			SPI_ByteExchangeAsynch(ptr_String[i] , &LOC_u8DummyData);
     2f6:	be 01       	movw	r22, r28
     2f8:	6f 5f       	subi	r22, 0xFF	; 255
     2fa:	7f 4f       	sbci	r23, 0xFF	; 255
     2fc:	f8 01       	movw	r30, r16
     2fe:	80 81       	ld	r24, Z
     300:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_ByteExchangeAsynch>
				USART_TxByteSynch('\n') ;
				USART_TxByteSynch('\r') ;
			 #else 

			#endif
		}while(LOC_u8DummyData != MASTER_ACK);
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	8b 32       	cpi	r24, 0x2B	; 43
     308:	b1 f7       	brne	.-20     	; 0x2f6 <APP_voidSendStringThroughSPI+0x1c>
		i++ ; 
     30a:	f3 94       	inc	r15
}
void APP_voidSendStringThroughSPI(u8 *ptr_String)
{
	u8 LOC_u8DummyData = 0 ; 
	u8 i = 0;
	while(ptr_String[i] != '\0' )
     30c:	86 01       	movw	r16, r12
     30e:	0f 0d       	add	r16, r15
     310:	11 1d       	adc	r17, r1
     312:	f8 01       	movw	r30, r16
     314:	80 81       	ld	r24, Z
     316:	81 11       	cpse	r24, r1
     318:	ee cf       	rjmp	.-36     	; 0x2f6 <APP_voidSendStringThroughSPI+0x1c>

			#endif
		}while(LOC_u8DummyData != MASTER_ACK);
		i++ ; 
	}
     31a:	0f 90       	pop	r0
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	ff 90       	pop	r15
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	08 95       	ret

0000032c <APP_voidSendDataThroughSPI>:
{
	
	APP_voidSendDataThroughSPI(ptr_Name , ptr_ID) ; 
}
void APP_voidSendDataThroughSPI(u8 *ptr_Name , u8 *ptr_ID)
{
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	8c 01       	movw	r16, r24
     336:	eb 01       	movw	r28, r22
	GPIO_TogglePin(PORTA,PIN0);
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <GPIO_TogglePin>

	
	APP_voidSendStringThroughSPI(ptr_Name) ; 
     340:	c8 01       	movw	r24, r16
     342:	0e 94 6d 01 	call	0x2da	; 0x2da <APP_voidSendStringThroughSPI>
	APP_voidSendStringThroughSPI(ptr_ID) ;
     346:	ce 01       	movw	r24, r28
     348:	0e 94 6d 01 	call	0x2da	; 0x2da <APP_voidSendStringThroughSPI>
	APP_IsValidID();	  
     34c:	0e 94 4c 01 	call	0x298	; 0x298 <APP_IsValidID>
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	08 95       	ret

0000035a <RFID_Callback>:


void RFID_Callback(u8 *ptr_Name , u8 *ptr_ID)
{
	
	APP_voidSendDataThroughSPI(ptr_Name , ptr_ID) ; 
     35a:	0e 94 96 01 	call	0x32c	; 0x32c <APP_voidSendDataThroughSPI>
     35e:	08 95       	ret

00000360 <Gate_Init>:
*******************************************************************************/


void Gate_Init()
{
	PWM_Init(&__InternalDriverServoMotor__);
     360:	83 e7       	ldi	r24, 0x73	; 115
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 59 06 	call	0xcb2	; 0xcb2 <PWM_Init>
	PWM_SetOCPin(&__InternalDriverServoMotor__,((ptr_usrConfig.selectServoPin)&0xA0));
     368:	60 e2       	ldi	r22, 0x20	; 32
     36a:	83 e7       	ldi	r24, 0x73	; 115
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 cb 06 	call	0xd96	; 0xd96 <PWM_SetOCPin>
	GPIO_SetPinDirection(PORTD, ((ptr_usrConfig.selectServoPin)& 0x07), OUTPUT);
     372:	41 e0       	ldi	r20, 0x01	; 1
     374:	64 e0       	ldi	r22, 0x04	; 4
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     37c:	08 95       	ret

0000037e <OpenGate>:
}
void OpenGate()
{
	PWM_PhaseFrequencyCorrectSetValues(&__InternalDriverServoMotor__,((ptr_usrConfig.selectServoPin)&0xA0),2499,188);
     37e:	2c eb       	ldi	r18, 0xBC	; 188
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	43 ec       	ldi	r20, 0xC3	; 195
     384:	59 e0       	ldi	r21, 0x09	; 9
     386:	60 e2       	ldi	r22, 0x20	; 32
     388:	83 e7       	ldi	r24, 0x73	; 115
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 df 06 	call	0xdbe	; 0xdbe <PWM_PhaseFrequencyCorrectSetValues>
     390:	08 95       	ret

00000392 <CloseGate>:

}
void CloseGate()
{
	PWM_PhaseFrequencyCorrectSetValues(&__InternalDriverServoMotor__,((ptr_usrConfig.selectServoPin)&0xA0),2499,125 );
     392:	2d e7       	ldi	r18, 0x7D	; 125
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	43 ec       	ldi	r20, 0xC3	; 195
     398:	59 e0       	ldi	r21, 0x09	; 9
     39a:	60 e2       	ldi	r22, 0x20	; 32
     39c:	83 e7       	ldi	r24, 0x73	; 115
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 df 06 	call	0xdbe	; 0xdbe <PWM_PhaseFrequencyCorrectSetValues>
     3a4:	08 95       	ret

000003a6 <LCD_voidWriteCmd>:
		index++;
	}
}

void LCD_SendStringAt(LCD_Config* ptrCnfg , u8* ptr_u8data, u8 x , u8 y )
{
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
     3ae:	16 2f       	mov	r17, r22
     3b0:	ea 81       	ldd	r30, Y+2	; 0x02
     3b2:	fb 81       	ldd	r31, Y+3	; 0x03
     3b4:	64 fb       	bst	r22, 4
     3b6:	44 27       	eor	r20, r20
     3b8:	40 f9       	bld	r20, 0
     3ba:	65 81       	ldd	r22, Z+5	; 0x05
     3bc:	84 81       	ldd	r24, Z+4	; 0x04
     3be:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     3c2:	ea 81       	ldd	r30, Y+2	; 0x02
     3c4:	fb 81       	ldd	r31, Y+3	; 0x03
     3c6:	15 fb       	bst	r17, 5
     3c8:	44 27       	eor	r20, r20
     3ca:	40 f9       	bld	r20, 0
     3cc:	67 81       	ldd	r22, Z+7	; 0x07
     3ce:	86 81       	ldd	r24, Z+6	; 0x06
     3d0:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     3d4:	ea 81       	ldd	r30, Y+2	; 0x02
     3d6:	fb 81       	ldd	r31, Y+3	; 0x03
     3d8:	16 fb       	bst	r17, 6
     3da:	44 27       	eor	r20, r20
     3dc:	40 f9       	bld	r20, 0
     3de:	61 85       	ldd	r22, Z+9	; 0x09
     3e0:	80 85       	ldd	r24, Z+8	; 0x08
     3e2:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     3e6:	ea 81       	ldd	r30, Y+2	; 0x02
     3e8:	fb 81       	ldd	r31, Y+3	; 0x03
     3ea:	41 2f       	mov	r20, r17
     3ec:	44 1f       	adc	r20, r20
     3ee:	44 27       	eor	r20, r20
     3f0:	44 1f       	adc	r20, r20
     3f2:	63 85       	ldd	r22, Z+11	; 0x0b
     3f4:	82 85       	ldd	r24, Z+10	; 0x0a
     3f6:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     3fa:	ea 81       	ldd	r30, Y+2	; 0x02
     3fc:	fb 81       	ldd	r31, Y+3	; 0x03
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	63 81       	ldd	r22, Z+3	; 0x03
     402:	82 81       	ldd	r24, Z+2	; 0x02
     404:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     408:	ea 81       	ldd	r30, Y+2	; 0x02
     40a:	fb 81       	ldd	r31, Y+3	; 0x03
     40c:	41 e0       	ldi	r20, 0x01	; 1
     40e:	61 81       	ldd	r22, Z+1	; 0x01
     410:	80 81       	ld	r24, Z
     412:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     416:	89 ef       	ldi	r24, 0xF9	; 249
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
     420:	00 00       	nop
     422:	ea 81       	ldd	r30, Y+2	; 0x02
     424:	fb 81       	ldd	r31, Y+3	; 0x03
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	61 81       	ldd	r22, Z+1	; 0x01
     42a:	80 81       	ld	r24, Z
     42c:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     430:	89 ef       	ldi	r24, 0xF9	; 249
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     438:	00 c0       	rjmp	.+0      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
     43a:	00 00       	nop
     43c:	ea 81       	ldd	r30, Y+2	; 0x02
     43e:	fb 81       	ldd	r31, Y+3	; 0x03
     440:	41 2f       	mov	r20, r17
     442:	41 70       	andi	r20, 0x01	; 1
     444:	65 81       	ldd	r22, Z+5	; 0x05
     446:	84 81       	ldd	r24, Z+4	; 0x04
     448:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     44c:	ea 81       	ldd	r30, Y+2	; 0x02
     44e:	fb 81       	ldd	r31, Y+3	; 0x03
     450:	11 fb       	bst	r17, 1
     452:	44 27       	eor	r20, r20
     454:	40 f9       	bld	r20, 0
     456:	67 81       	ldd	r22, Z+7	; 0x07
     458:	86 81       	ldd	r24, Z+6	; 0x06
     45a:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     45e:	ea 81       	ldd	r30, Y+2	; 0x02
     460:	fb 81       	ldd	r31, Y+3	; 0x03
     462:	12 fb       	bst	r17, 2
     464:	44 27       	eor	r20, r20
     466:	40 f9       	bld	r20, 0
     468:	61 85       	ldd	r22, Z+9	; 0x09
     46a:	80 85       	ldd	r24, Z+8	; 0x08
     46c:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     470:	ea 81       	ldd	r30, Y+2	; 0x02
     472:	fb 81       	ldd	r31, Y+3	; 0x03
     474:	13 fb       	bst	r17, 3
     476:	44 27       	eor	r20, r20
     478:	40 f9       	bld	r20, 0
     47a:	63 85       	ldd	r22, Z+11	; 0x0b
     47c:	82 85       	ldd	r24, Z+10	; 0x0a
     47e:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     482:	ea 81       	ldd	r30, Y+2	; 0x02
     484:	fb 81       	ldd	r31, Y+3	; 0x03
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	63 81       	ldd	r22, Z+3	; 0x03
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     490:	ea 81       	ldd	r30, Y+2	; 0x02
     492:	fb 81       	ldd	r31, Y+3	; 0x03
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	61 81       	ldd	r22, Z+1	; 0x01
     498:	80 81       	ld	r24, Z
     49a:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     49e:	89 ef       	ldi	r24, 0xF9	; 249
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__stack+0x43>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__stack+0x49>
     4a8:	00 00       	nop
     4aa:	ea 81       	ldd	r30, Y+2	; 0x02
     4ac:	fb 81       	ldd	r31, Y+3	; 0x03
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	61 81       	ldd	r22, Z+1	; 0x01
     4b2:	80 81       	ld	r24, Z
     4b4:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     4b8:	89 ef       	ldi	r24, 0xF9	; 249
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <__stack+0x5d>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__stack+0x63>
     4c2:	00 00       	nop
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	08 95       	ret

000004cc <LCD_Init>:
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	ec 01       	movw	r28, r24
     4d2:	ea 81       	ldd	r30, Y+2	; 0x02
     4d4:	fb 81       	ldd	r31, Y+3	; 0x03
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	65 81       	ldd	r22, Z+5	; 0x05
     4da:	84 81       	ldd	r24, Z+4	; 0x04
     4dc:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     4e0:	ea 81       	ldd	r30, Y+2	; 0x02
     4e2:	fb 81       	ldd	r31, Y+3	; 0x03
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	67 81       	ldd	r22, Z+7	; 0x07
     4e8:	86 81       	ldd	r24, Z+6	; 0x06
     4ea:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     4ee:	ea 81       	ldd	r30, Y+2	; 0x02
     4f0:	fb 81       	ldd	r31, Y+3	; 0x03
     4f2:	41 e0       	ldi	r20, 0x01	; 1
     4f4:	61 85       	ldd	r22, Z+9	; 0x09
     4f6:	80 85       	ldd	r24, Z+8	; 0x08
     4f8:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     4fc:	ea 81       	ldd	r30, Y+2	; 0x02
     4fe:	fb 81       	ldd	r31, Y+3	; 0x03
     500:	41 e0       	ldi	r20, 0x01	; 1
     502:	63 85       	ldd	r22, Z+11	; 0x0b
     504:	82 85       	ldd	r24, Z+10	; 0x0a
     506:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     50a:	ea 81       	ldd	r30, Y+2	; 0x02
     50c:	fb 81       	ldd	r31, Y+3	; 0x03
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	63 81       	ldd	r22, Z+3	; 0x03
     512:	82 81       	ldd	r24, Z+2	; 0x02
     514:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     518:	ea 81       	ldd	r30, Y+2	; 0x02
     51a:	fb 81       	ldd	r31, Y+3	; 0x03
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	61 81       	ldd	r22, Z+1	; 0x01
     520:	80 81       	ld	r24, Z
     522:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     526:	62 e0       	ldi	r22, 0x02	; 2
     528:	ce 01       	movw	r24, r28
     52a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     52e:	68 e2       	ldi	r22, 0x28	; 40
     530:	ce 01       	movw	r24, r28
     532:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	ce 01       	movw	r24, r28
     53a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     53e:	6f e0       	ldi	r22, 0x0F	; 15
     540:	ce 01       	movw	r24, r28
     542:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     546:	60 e8       	ldi	r22, 0x80	; 128
     548:	ce 01       	movw	r24, r28
     54a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     54e:	83 ef       	ldi	r24, 0xF3	; 243
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <LCD_Init+0x86>
     556:	00 c0       	rjmp	.+0      	; 0x558 <LCD_Init+0x8c>
     558:	00 00       	nop
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <LCD_SendChar>:
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
     568:	16 2f       	mov	r17, r22
     56a:	ea 81       	ldd	r30, Y+2	; 0x02
     56c:	fb 81       	ldd	r31, Y+3	; 0x03
     56e:	64 fb       	bst	r22, 4
     570:	44 27       	eor	r20, r20
     572:	40 f9       	bld	r20, 0
     574:	65 81       	ldd	r22, Z+5	; 0x05
     576:	84 81       	ldd	r24, Z+4	; 0x04
     578:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     57c:	ea 81       	ldd	r30, Y+2	; 0x02
     57e:	fb 81       	ldd	r31, Y+3	; 0x03
     580:	15 fb       	bst	r17, 5
     582:	44 27       	eor	r20, r20
     584:	40 f9       	bld	r20, 0
     586:	67 81       	ldd	r22, Z+7	; 0x07
     588:	86 81       	ldd	r24, Z+6	; 0x06
     58a:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     58e:	ea 81       	ldd	r30, Y+2	; 0x02
     590:	fb 81       	ldd	r31, Y+3	; 0x03
     592:	16 fb       	bst	r17, 6
     594:	44 27       	eor	r20, r20
     596:	40 f9       	bld	r20, 0
     598:	61 85       	ldd	r22, Z+9	; 0x09
     59a:	80 85       	ldd	r24, Z+8	; 0x08
     59c:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     5a0:	ea 81       	ldd	r30, Y+2	; 0x02
     5a2:	fb 81       	ldd	r31, Y+3	; 0x03
     5a4:	41 2f       	mov	r20, r17
     5a6:	44 1f       	adc	r20, r20
     5a8:	44 27       	eor	r20, r20
     5aa:	44 1f       	adc	r20, r20
     5ac:	63 85       	ldd	r22, Z+11	; 0x0b
     5ae:	82 85       	ldd	r24, Z+10	; 0x0a
     5b0:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     5b4:	ea 81       	ldd	r30, Y+2	; 0x02
     5b6:	fb 81       	ldd	r31, Y+3	; 0x03
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	63 81       	ldd	r22, Z+3	; 0x03
     5bc:	82 81       	ldd	r24, Z+2	; 0x02
     5be:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     5c2:	ea 81       	ldd	r30, Y+2	; 0x02
     5c4:	fb 81       	ldd	r31, Y+3	; 0x03
     5c6:	41 e0       	ldi	r20, 0x01	; 1
     5c8:	61 81       	ldd	r22, Z+1	; 0x01
     5ca:	80 81       	ld	r24, Z
     5cc:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     5d0:	89 ef       	ldi	r24, 0xF9	; 249
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	01 97       	sbiw	r24, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_SendChar+0x74>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <LCD_SendChar+0x7a>
     5da:	00 00       	nop
     5dc:	ea 81       	ldd	r30, Y+2	; 0x02
     5de:	fb 81       	ldd	r31, Y+3	; 0x03
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	61 81       	ldd	r22, Z+1	; 0x01
     5e4:	80 81       	ld	r24, Z
     5e6:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     5ea:	89 ef       	ldi	r24, 0xF9	; 249
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_SendChar+0x8e>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_SendChar+0x94>
     5f4:	00 00       	nop
     5f6:	ea 81       	ldd	r30, Y+2	; 0x02
     5f8:	fb 81       	ldd	r31, Y+3	; 0x03
     5fa:	41 2f       	mov	r20, r17
     5fc:	41 70       	andi	r20, 0x01	; 1
     5fe:	65 81       	ldd	r22, Z+5	; 0x05
     600:	84 81       	ldd	r24, Z+4	; 0x04
     602:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     606:	ea 81       	ldd	r30, Y+2	; 0x02
     608:	fb 81       	ldd	r31, Y+3	; 0x03
     60a:	11 fb       	bst	r17, 1
     60c:	44 27       	eor	r20, r20
     60e:	40 f9       	bld	r20, 0
     610:	67 81       	ldd	r22, Z+7	; 0x07
     612:	86 81       	ldd	r24, Z+6	; 0x06
     614:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     618:	ea 81       	ldd	r30, Y+2	; 0x02
     61a:	fb 81       	ldd	r31, Y+3	; 0x03
     61c:	12 fb       	bst	r17, 2
     61e:	44 27       	eor	r20, r20
     620:	40 f9       	bld	r20, 0
     622:	61 85       	ldd	r22, Z+9	; 0x09
     624:	80 85       	ldd	r24, Z+8	; 0x08
     626:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     62a:	ea 81       	ldd	r30, Y+2	; 0x02
     62c:	fb 81       	ldd	r31, Y+3	; 0x03
     62e:	13 fb       	bst	r17, 3
     630:	44 27       	eor	r20, r20
     632:	40 f9       	bld	r20, 0
     634:	63 85       	ldd	r22, Z+11	; 0x0b
     636:	82 85       	ldd	r24, Z+10	; 0x0a
     638:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     63c:	ea 81       	ldd	r30, Y+2	; 0x02
     63e:	fb 81       	ldd	r31, Y+3	; 0x03
     640:	41 e0       	ldi	r20, 0x01	; 1
     642:	63 81       	ldd	r22, Z+3	; 0x03
     644:	82 81       	ldd	r24, Z+2	; 0x02
     646:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     64a:	ea 81       	ldd	r30, Y+2	; 0x02
     64c:	fb 81       	ldd	r31, Y+3	; 0x03
     64e:	41 e0       	ldi	r20, 0x01	; 1
     650:	61 81       	ldd	r22, Z+1	; 0x01
     652:	80 81       	ld	r24, Z
     654:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     658:	89 ef       	ldi	r24, 0xF9	; 249
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <LCD_SendChar+0xfc>
     660:	00 c0       	rjmp	.+0      	; 0x662 <LCD_SendChar+0x102>
     662:	00 00       	nop
     664:	ea 81       	ldd	r30, Y+2	; 0x02
     666:	fb 81       	ldd	r31, Y+3	; 0x03
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	61 81       	ldd	r22, Z+1	; 0x01
     66c:	80 81       	ld	r24, Z
     66e:	0e 94 62 05 	call	0xac4	; 0xac4 <GPIO_SetPinValue>
     672:	89 ef       	ldi	r24, 0xF9	; 249
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	01 97       	sbiw	r24, 0x01	; 1
     678:	f1 f7       	brne	.-4      	; 0x676 <LCD_SendChar+0x116>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <LCD_SendChar+0x11c>
     67c:	00 00       	nop
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	08 95       	ret

00000686 <LCD_SendString>:
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	7c 01       	movw	r14, r24
     692:	8b 01       	movw	r16, r22
     694:	c0 e0       	ldi	r28, 0x00	; 0
     696:	04 c0       	rjmp	.+8      	; 0x6a0 <LCD_SendString+0x1a>
     698:	c7 01       	movw	r24, r14
     69a:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_SendChar>
     69e:	cf 5f       	subi	r28, 0xFF	; 255
     6a0:	f8 01       	movw	r30, r16
     6a2:	ec 0f       	add	r30, r28
     6a4:	f1 1d       	adc	r31, r1
     6a6:	60 81       	ld	r22, Z
     6a8:	61 11       	cpse	r22, r1
     6aa:	f6 cf       	rjmp	.-20     	; 0x698 <LCD_SendString+0x12>
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	08 95       	ret

000006b8 <LCD_SetCursor>:
	
		
}
void LCD_SetCursor(LCD_Config*  ptrLCD ,cursorType copy_cursorType)
{
	LCD_voidWriteCmd(ptrLCD, copy_cursorType) ;
     6b8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     6bc:	08 95       	ret

000006be <LCD_SetDisplayState>:
}
void LCD_SetDisplayState (LCD_Config*  ptrLCD ,u8 displayState)
{
	switch(displayState)
     6be:	61 11       	cpse	r22, r1
     6c0:	04 c0       	rjmp	.+8      	; 0x6ca <LCD_SetDisplayState+0xc>
	{
		case DISP_OFF : 
			LCD_voidWriteCmd(ptrLCD,LCD_DISP_OFF);
     6c2:	68 e0       	ldi	r22, 0x08	; 8
     6c4:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
			break;
     6c8:	08 95       	ret
		default:
			LCD_voidWriteCmd(ptrLCD,LCD_DISP_ON);
     6ca:	6c e0       	ldi	r22, 0x0C	; 12
     6cc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     6d0:	08 95       	ret

000006d2 <LCD_GotoXY>:
	 |           |			for Row 1 and in between 0x40 -> 0x4f select Col
	 |           |	
	 |           | 0x4f	
	*/
	u8 address = 0 ; 
	if( y < ACCESS_STRUCT(ptrCnfg,LCD_SIZE_Rows) && x < ACCESS_STRUCT(ptrCnfg,LCD_SIZE_Cols) )
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 81       	ld	r18, Z
     6d6:	42 17       	cp	r20, r18
     6d8:	50 f4       	brcc	.+20     	; 0x6ee <LCD_GotoXY+0x1c>
     6da:	21 81       	ldd	r18, Z+1	; 0x01
     6dc:	62 17       	cp	r22, r18
     6de:	38 f4       	brcc	.+14     	; 0x6ee <LCD_GotoXY+0x1c>
		 *	RS 0
		 *  RW 0 --> 0 by default
		 *  D7 1
		 * ADD
		 */	
		 address = y * 0x40 + x;		/*	If 0 --> Row 1 , If 0x40 Row 2	*/
     6e0:	f0 e4       	ldi	r31, 0x40	; 64
     6e2:	4f 9f       	mul	r20, r31
     6e4:	60 0d       	add	r22, r0
     6e6:	11 24       	eor	r1, r1
		 address = address ;		/* To Goto x position	*/
		 address |= (1 << 7) ;
     6e8:	60 68       	ori	r22, 0x80	; 128

		LCD_voidWriteCmd(ptrCnfg , address);
     6ea:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     6ee:	08 95       	ret

000006f0 <LCD_Clear>:
		
	}

}
void LCD_Clear(LCD_Config* x)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ec 01       	movw	r28, r24
	LCD_voidWriteCmd(x,LCD_CLEAR_SCREEN);	
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
     6fc:	89 ef       	ldi	r24, 0xF9	; 249
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <LCD_Clear+0x10>
     704:	00 c0       	rjmp	.+0      	; 0x706 <LCD_Clear+0x16>
     706:	00 00       	nop
	WAIT_MS(1);		
	LCD_voidWriteCmd(x , LCD_BEGIN_AT_FIRST_ROW) ;
     708:	60 e8       	ldi	r22, 0x80	; 128
     70a:	ce 01       	movw	r24, r28
     70c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_voidWriteCmd>
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <PIR_Init>:

void PIR_Init(void)
{
	#if PIR_BASED_ON == PIR_INTERRUPT
	#else
	GPIO_SetPinDirection(PIR_PORT_PIN,INPUT_FLOAT);
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	63 e0       	ldi	r22, 0x03	; 3
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     720:	08 95       	ret

00000722 <PIR_u8ExistMovement>:
}
#else
u8 PIR_u8ExistMovement(void)
{
	u8 LOC_u8Result = 0 ;
	LOC_u8Result = GPIO_u8GetPinValue(PIR_PORT_PIN);
     722:	63 e0       	ldi	r22, 0x03	; 3
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <GPIO_u8GetPinValue>
	return LOC_u8Result ;
}
     72a:	08 95       	ret

0000072c <RFID_ReceivedData>:

/******************************************************************************
* Static Function Definitions
*******************************************************************************/
static void RFID_ReceivedData(u8 Data)
{
     72c:	cf 93       	push	r28
     72e:	c8 2f       	mov	r28, r24

	
	if(Global_RFID_State == RFID_FINISHED)
     730:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Global_RFID_State>
     734:	81 11       	cpse	r24, r1
     736:	1d c0       	rjmp	.+58     	; 0x772 <RFID_ReceivedData+0x46>
	{
		// Call User Callback
		Global_RFID_u8ID[Global_ID_Counter] = '\0';
     738:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <Global_ID_Counter>
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	e9 5d       	subi	r30, 0xD9	; 217
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	10 82       	st	Z, r1
		Global_RFID_u8Name[Global_Name_Counter] = '\0' ;
     744:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <Global_Name_Counter>
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	e4 5e       	subi	r30, 0xE4	; 228
     74c:	fe 4f       	sbci	r31, 0xFE	; 254
     74e:	10 82       	st	Z, r1
		Global_ID_Counter =  0 ;
     750:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Global_ID_Counter>
		Global_Name_Counter = 0 ;
     754:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <Global_Name_Counter>
		Global_RFID_State = RFID_NOT_FINISHED ;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Global_RFID_State>
		_UART_RFID_Callback(Global_RFID_u8Name ,Global_RFID_u8ID);
     75e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <_UART_RFID_Callback>
     762:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <_UART_RFID_Callback+0x1>
     766:	67 e2       	ldi	r22, 0x27	; 39
     768:	71 e0       	ldi	r23, 0x01	; 1
     76a:	8c e1       	ldi	r24, 0x1C	; 28
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	09 95       	icall
     770:	3c c0       	rjmp	.+120    	; 0x7ea <RFID_ReceivedData+0xbe>
	else
	{
		// Receive Data
		u8 LOC_u8Dummy = 0 ;
		LOC_u8Dummy = Data ;
		if(LOC_u8Dummy >= '0' && LOC_u8Dummy <= '9')
     772:	80 ed       	ldi	r24, 0xD0	; 208
     774:	8c 0f       	add	r24, r28
     776:	8a 30       	cpi	r24, 0x0A	; 10
     778:	88 f4       	brcc	.+34     	; 0x79c <RFID_ReceivedData+0x70>
		{
			if(Global_ID_Counter != 7)
     77a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <Global_ID_Counter>
     77e:	e7 30       	cpi	r30, 0x07	; 7
     780:	61 f1       	breq	.+88     	; 0x7da <RFID_ReceivedData+0xae>
			{
				// ID
				Global_RFID_u8ID[Global_ID_Counter] = LOC_u8Dummy ;
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	e9 5d       	subi	r30, 0xD9	; 217
     786:	fe 4f       	sbci	r31, 0xFE	; 254
     788:	c0 83       	st	Z, r28
				USART_TxByteSynch(LOC_u8Dummy);
     78a:	8c 2f       	mov	r24, r28
     78c:	0e 94 a3 07 	call	0xf46	; 0xf46 <USART_TxByteSynch>
				++Global_ID_Counter;
     790:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Global_ID_Counter>
     794:	8f 5f       	subi	r24, 0xFF	; 255
     796:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Global_ID_Counter>
     79a:	1f c0       	rjmp	.+62     	; 0x7da <RFID_ReceivedData+0xae>
			}
		}
		else if ( (LOC_u8Dummy >= 'a'  && LOC_u8Dummy <= 'z') || (LOC_u8Dummy >= 'A'  && LOC_u8Dummy <= 'Z') )
     79c:	8f e9       	ldi	r24, 0x9F	; 159
     79e:	8c 0f       	add	r24, r28
     7a0:	8a 31       	cpi	r24, 0x1A	; 26
     7a2:	20 f0       	brcs	.+8      	; 0x7ac <RFID_ReceivedData+0x80>
     7a4:	8f eb       	ldi	r24, 0xBF	; 191
     7a6:	8c 0f       	add	r24, r28
     7a8:	8a 31       	cpi	r24, 0x1A	; 26
     7aa:	88 f4       	brcc	.+34     	; 0x7ce <RFID_ReceivedData+0xa2>
		{
			// Name
			if(Global_Name_Counter != 10)
     7ac:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <Global_Name_Counter>
     7b0:	ea 30       	cpi	r30, 0x0A	; 10
     7b2:	99 f0       	breq	.+38     	; 0x7da <RFID_ReceivedData+0xae>
			{
				Global_RFID_u8Name[Global_Name_Counter] = LOC_u8Dummy ;
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	e4 5e       	subi	r30, 0xE4	; 228
     7b8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ba:	c0 83       	st	Z, r28
				USART_TxByteSynch(LOC_u8Dummy);
     7bc:	8c 2f       	mov	r24, r28
     7be:	0e 94 a3 07 	call	0xf46	; 0xf46 <USART_TxByteSynch>
				++Global_Name_Counter;
     7c2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Global_Name_Counter>
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <Global_Name_Counter>
     7cc:	06 c0       	rjmp	.+12     	; 0x7da <RFID_ReceivedData+0xae>
			}
		}
		else
		{
			USART_TxByteSynch('\r') ;
     7ce:	8d e0       	ldi	r24, 0x0D	; 13
     7d0:	0e 94 a3 07 	call	0xf46	; 0xf46 <USART_TxByteSynch>
			USART_TxByteSynch('\n') ;
     7d4:	8a e0       	ldi	r24, 0x0A	; 10
     7d6:	0e 94 a3 07 	call	0xf46	; 0xf46 <USART_TxByteSynch>
		}

		if(Global_ID_Counter == 7 && ((LOC_u8Dummy == (u8)RFID_TERMINATE_NULL)) )
     7da:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Global_ID_Counter>
     7de:	87 30       	cpi	r24, 0x07	; 7
     7e0:	21 f4       	brne	.+8      	; 0x7ea <RFID_ReceivedData+0xbe>
     7e2:	cd 30       	cpi	r28, 0x0D	; 13
     7e4:	11 f4       	brne	.+4      	; 0x7ea <RFID_ReceivedData+0xbe>
		{
			Global_RFID_State = RFID_FINISHED ;
     7e6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Global_RFID_State>
		}

	}
}
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <RFID_Init>:
/******************************************************************************
* Function Definitions
*******************************************************************************/
void RFID_Init(void)
{
	USART_Init(&_RFID_Entrance_UART);
     7ee:	87 e7       	ldi	r24, 0x77	; 119
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <USART_Init>
     7f6:	08 95       	ret

000007f8 <RFID_GetData_>:
}

void RFID_GetData_(void (*ptrCallback)(u8 *pty_u8Name , u8* ptr_u8ID))
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
	USART_RxByteAsynch(RFID_ReceivedData);
     7fe:	86 e9       	ldi	r24, 0x96	; 150
     800:	93 e0       	ldi	r25, 0x03	; 3
     802:	0e 94 bf 07 	call	0xf7e	; 0xf7e <USART_RxByteAsynch>
	_UART_RFID_Callback  = ptrCallback ;
     806:	d0 93 0b 01 	sts	0x010B, r29	; 0x80010b <_UART_RFID_Callback+0x1>
     80a:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_UART_RFID_Callback>

}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <main>:
#include "APP/APP.h" 


int main(void)
{
	SetupApp() ;
     814:	0e 94 ff 00 	call	0x1fe	; 0x1fe <SetupApp>
	while (1)
	{
		AppLoop() ;
     818:	0e 94 2f 01 	call	0x25e	; 0x25e <AppLoop>
     81c:	fd cf       	rjmp	.-6      	; 0x818 <main+0x4>

0000081e <__vector_1>:
	CLR_BIT(SREG,SREG_GIE);
}


void __vector_1(void)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	2f 93       	push	r18
     82a:	3f 93       	push	r19
     82c:	4f 93       	push	r20
     82e:	5f 93       	push	r21
     830:	6f 93       	push	r22
     832:	7f 93       	push	r23
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31
	Callback_INT0();
     840:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <Callback_INT0>
     844:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <Callback_INT0+0x1>
     848:	09 95       	icall
}
     84a:	ff 91       	pop	r31
     84c:	ef 91       	pop	r30
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_2>:

void __vector_2(void)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
	Callback_INT1();
     88e:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <Callback_INT1>
     892:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <Callback_INT1+0x1>
     896:	09 95       	icall
	
	
}
     898:	ff 91       	pop	r31
     89a:	ef 91       	pop	r30
     89c:	bf 91       	pop	r27
     89e:	af 91       	pop	r26
     8a0:	9f 91       	pop	r25
     8a2:	8f 91       	pop	r24
     8a4:	7f 91       	pop	r23
     8a6:	6f 91       	pop	r22
     8a8:	5f 91       	pop	r21
     8aa:	4f 91       	pop	r20
     8ac:	3f 91       	pop	r19
     8ae:	2f 91       	pop	r18
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <__vector_18>:

void __vector_18(void)
{
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	2f 93       	push	r18
     8c6:	3f 93       	push	r19
     8c8:	4f 93       	push	r20
     8ca:	5f 93       	push	r21
     8cc:	6f 93       	push	r22
     8ce:	7f 93       	push	r23
     8d0:	8f 93       	push	r24
     8d2:	9f 93       	push	r25
     8d4:	af 93       	push	r26
     8d6:	bf 93       	push	r27
     8d8:	ef 93       	push	r30
     8da:	ff 93       	push	r31
	Callback_INT2();
     8dc:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <Callback_INT2>
     8e0:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <Callback_INT2+0x1>
     8e4:	09 95       	icall
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <GPIO_Init>:
	#define MASTER_MISO_PIN		PORTB	,	PIN6	,	INPUT_FLOAT
	#define MASTER_SS_PIN		PORTB	,	PIN4	,	OUTPUT
	GPIO_SetPinDirection(MASTER_MOSI_PIN) ;
	GPIO_SetPinDirection(MASTER_SCK_PIN) ;
	GPIO_SetPinDirection(MASTER_MISO_PIN) ;
	GPIO_SetPinDirection(MASTER_SS_PIN) ;
     908:	1b ba       	out	0x1b, r1	; 27
     90a:	1a ba       	out	0x1a, r1	; 26
     90c:	19 ba       	out	0x19, r1	; 25
     90e:	18 ba       	out	0x18, r1	; 24
     910:	17 ba       	out	0x17, r1	; 23
     912:	16 ba       	out	0x16, r1	; 22
     914:	15 ba       	out	0x15, r1	; 21
     916:	14 ba       	out	0x14, r1	; 20
     918:	13 ba       	out	0x13, r1	; 19
     91a:	12 ba       	out	0x12, r1	; 18
     91c:	11 ba       	out	0x11, r1	; 17
     91e:	10 ba       	out	0x10, r1	; 16
     920:	08 95       	ret

00000922 <GPIO_SetPinDirection>:
     922:	68 30       	cpi	r22, 0x08	; 8
     924:	08 f0       	brcs	.+2      	; 0x928 <GPIO_SetPinDirection+0x6>
     926:	cd c0       	rjmp	.+410    	; 0xac2 <GPIO_SetPinDirection+0x1a0>
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	c9 f1       	breq	.+114    	; 0x99e <GPIO_SetPinDirection+0x7c>
     92c:	38 f0       	brcs	.+14     	; 0x93c <GPIO_SetPinDirection+0x1a>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	09 f4       	brne	.+2      	; 0x934 <GPIO_SetPinDirection+0x12>
     932:	66 c0       	rjmp	.+204    	; 0xa00 <GPIO_SetPinDirection+0xde>
     934:	83 30       	cpi	r24, 0x03	; 3
     936:	09 f4       	brne	.+2      	; 0x93a <GPIO_SetPinDirection+0x18>
     938:	94 c0       	rjmp	.+296    	; 0xa62 <GPIO_SetPinDirection+0x140>
     93a:	08 95       	ret
     93c:	41 30       	cpi	r20, 0x01	; 1
     93e:	21 f1       	breq	.+72     	; 0x988 <GPIO_SetPinDirection+0x66>
     940:	18 f0       	brcs	.+6      	; 0x948 <GPIO_SetPinDirection+0x26>
     942:	42 30       	cpi	r20, 0x02	; 2
     944:	89 f0       	breq	.+34     	; 0x968 <GPIO_SetPinDirection+0x46>
     946:	08 95       	ret
     948:	2a b3       	in	r18, 0x1a	; 26
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	02 c0       	rjmp	.+4      	; 0x954 <GPIO_SetPinDirection+0x32>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	6a 95       	dec	r22
     956:	e2 f7       	brpl	.-8      	; 0x950 <GPIO_SetPinDirection+0x2e>
     958:	80 95       	com	r24
     95a:	92 2f       	mov	r25, r18
     95c:	98 23       	and	r25, r24
     95e:	9a bb       	out	0x1a, r25	; 26
     960:	9b b3       	in	r25, 0x1b	; 27
     962:	89 23       	and	r24, r25
     964:	8b bb       	out	0x1b, r24	; 27
     966:	08 95       	ret
     968:	2a b3       	in	r18, 0x1a	; 26
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	02 c0       	rjmp	.+4      	; 0x974 <GPIO_SetPinDirection+0x52>
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	6a 95       	dec	r22
     976:	e2 f7       	brpl	.-8      	; 0x970 <GPIO_SetPinDirection+0x4e>
     978:	98 2f       	mov	r25, r24
     97a:	90 95       	com	r25
     97c:	92 23       	and	r25, r18
     97e:	9a bb       	out	0x1a, r25	; 26
     980:	9b b3       	in	r25, 0x1b	; 27
     982:	89 2b       	or	r24, r25
     984:	8b bb       	out	0x1b, r24	; 27
     986:	08 95       	ret
     988:	2a b3       	in	r18, 0x1a	; 26
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	02 c0       	rjmp	.+4      	; 0x994 <GPIO_SetPinDirection+0x72>
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	6a 95       	dec	r22
     996:	e2 f7       	brpl	.-8      	; 0x990 <GPIO_SetPinDirection+0x6e>
     998:	82 2b       	or	r24, r18
     99a:	8a bb       	out	0x1a, r24	; 26
     99c:	08 95       	ret
     99e:	41 30       	cpi	r20, 0x01	; 1
     9a0:	21 f1       	breq	.+72     	; 0x9ea <GPIO_SetPinDirection+0xc8>
     9a2:	18 f0       	brcs	.+6      	; 0x9aa <GPIO_SetPinDirection+0x88>
     9a4:	42 30       	cpi	r20, 0x02	; 2
     9a6:	89 f0       	breq	.+34     	; 0x9ca <GPIO_SetPinDirection+0xa8>
     9a8:	08 95       	ret
     9aa:	27 b3       	in	r18, 0x17	; 23
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <GPIO_SetPinDirection+0x94>
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	6a 95       	dec	r22
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <GPIO_SetPinDirection+0x90>
     9ba:	80 95       	com	r24
     9bc:	92 2f       	mov	r25, r18
     9be:	98 23       	and	r25, r24
     9c0:	97 bb       	out	0x17, r25	; 23
     9c2:	98 b3       	in	r25, 0x18	; 24
     9c4:	89 23       	and	r24, r25
     9c6:	88 bb       	out	0x18, r24	; 24
     9c8:	08 95       	ret
     9ca:	27 b3       	in	r18, 0x17	; 23
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <GPIO_SetPinDirection+0xb4>
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	6a 95       	dec	r22
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <GPIO_SetPinDirection+0xb0>
     9da:	98 2f       	mov	r25, r24
     9dc:	90 95       	com	r25
     9de:	92 23       	and	r25, r18
     9e0:	97 bb       	out	0x17, r25	; 23
     9e2:	98 b3       	in	r25, 0x18	; 24
     9e4:	89 2b       	or	r24, r25
     9e6:	88 bb       	out	0x18, r24	; 24
     9e8:	08 95       	ret
     9ea:	27 b3       	in	r18, 0x17	; 23
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <GPIO_SetPinDirection+0xd4>
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	6a 95       	dec	r22
     9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <GPIO_SetPinDirection+0xd0>
     9fa:	82 2b       	or	r24, r18
     9fc:	87 bb       	out	0x17, r24	; 23
     9fe:	08 95       	ret
     a00:	41 30       	cpi	r20, 0x01	; 1
     a02:	21 f1       	breq	.+72     	; 0xa4c <GPIO_SetPinDirection+0x12a>
     a04:	18 f0       	brcs	.+6      	; 0xa0c <GPIO_SetPinDirection+0xea>
     a06:	42 30       	cpi	r20, 0x02	; 2
     a08:	89 f0       	breq	.+34     	; 0xa2c <GPIO_SetPinDirection+0x10a>
     a0a:	08 95       	ret
     a0c:	24 b3       	in	r18, 0x14	; 20
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <GPIO_SetPinDirection+0xf6>
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	6a 95       	dec	r22
     a1a:	e2 f7       	brpl	.-8      	; 0xa14 <GPIO_SetPinDirection+0xf2>
     a1c:	80 95       	com	r24
     a1e:	92 2f       	mov	r25, r18
     a20:	98 23       	and	r25, r24
     a22:	94 bb       	out	0x14, r25	; 20
     a24:	95 b3       	in	r25, 0x15	; 21
     a26:	89 23       	and	r24, r25
     a28:	85 bb       	out	0x15, r24	; 21
     a2a:	08 95       	ret
     a2c:	24 b3       	in	r18, 0x14	; 20
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <GPIO_SetPinDirection+0x116>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	6a 95       	dec	r22
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <GPIO_SetPinDirection+0x112>
     a3c:	98 2f       	mov	r25, r24
     a3e:	90 95       	com	r25
     a40:	92 23       	and	r25, r18
     a42:	94 bb       	out	0x14, r25	; 20
     a44:	95 b3       	in	r25, 0x15	; 21
     a46:	89 2b       	or	r24, r25
     a48:	85 bb       	out	0x15, r24	; 21
     a4a:	08 95       	ret
     a4c:	24 b3       	in	r18, 0x14	; 20
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <GPIO_SetPinDirection+0x136>
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	6a 95       	dec	r22
     a5a:	e2 f7       	brpl	.-8      	; 0xa54 <GPIO_SetPinDirection+0x132>
     a5c:	82 2b       	or	r24, r18
     a5e:	84 bb       	out	0x14, r24	; 20
     a60:	08 95       	ret
     a62:	41 30       	cpi	r20, 0x01	; 1
     a64:	21 f1       	breq	.+72     	; 0xaae <GPIO_SetPinDirection+0x18c>
     a66:	18 f0       	brcs	.+6      	; 0xa6e <GPIO_SetPinDirection+0x14c>
     a68:	42 30       	cpi	r20, 0x02	; 2
     a6a:	89 f0       	breq	.+34     	; 0xa8e <GPIO_SetPinDirection+0x16c>
     a6c:	08 95       	ret
     a6e:	21 b3       	in	r18, 0x11	; 17
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <GPIO_SetPinDirection+0x158>
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	6a 95       	dec	r22
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <GPIO_SetPinDirection+0x154>
     a7e:	80 95       	com	r24
     a80:	92 2f       	mov	r25, r18
     a82:	98 23       	and	r25, r24
     a84:	91 bb       	out	0x11, r25	; 17
     a86:	92 b3       	in	r25, 0x12	; 18
     a88:	89 23       	and	r24, r25
     a8a:	82 bb       	out	0x12, r24	; 18
     a8c:	08 95       	ret
     a8e:	21 b3       	in	r18, 0x11	; 17
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <GPIO_SetPinDirection+0x178>
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	6a 95       	dec	r22
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <GPIO_SetPinDirection+0x174>
     a9e:	98 2f       	mov	r25, r24
     aa0:	90 95       	com	r25
     aa2:	92 23       	and	r25, r18
     aa4:	91 bb       	out	0x11, r25	; 17
     aa6:	92 b3       	in	r25, 0x12	; 18
     aa8:	89 2b       	or	r24, r25
     aaa:	82 bb       	out	0x12, r24	; 18
     aac:	08 95       	ret
     aae:	21 b3       	in	r18, 0x11	; 17
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <GPIO_SetPinDirection+0x198>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	6a 95       	dec	r22
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <GPIO_SetPinDirection+0x194>
     abe:	82 2b       	or	r24, r18
     ac0:	81 bb       	out	0x11, r24	; 17
     ac2:	08 95       	ret

00000ac4 <GPIO_SetPinValue>:
     ac4:	68 30       	cpi	r22, 0x08	; 8
     ac6:	08 f0       	brcs	.+2      	; 0xaca <GPIO_SetPinValue+0x6>
     ac8:	76 c0       	rjmp	.+236    	; 0xbb6 <GPIO_SetPinValue+0xf2>
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	19 f1       	breq	.+70     	; 0xb14 <GPIO_SetPinValue+0x50>
     ace:	30 f0       	brcs	.+12     	; 0xadc <GPIO_SetPinValue+0x18>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	e1 f1       	breq	.+120    	; 0xb4c <GPIO_SetPinValue+0x88>
     ad4:	83 30       	cpi	r24, 0x03	; 3
     ad6:	09 f4       	brne	.+2      	; 0xada <GPIO_SetPinValue+0x16>
     ad8:	54 c0       	rjmp	.+168    	; 0xb82 <GPIO_SetPinValue+0xbe>
     ada:	08 95       	ret
     adc:	44 23       	and	r20, r20
     ade:	71 f0       	breq	.+28     	; 0xafc <GPIO_SetPinValue+0x38>
     ae0:	41 30       	cpi	r20, 0x01	; 1
     ae2:	09 f0       	breq	.+2      	; 0xae6 <GPIO_SetPinValue+0x22>
     ae4:	68 c0       	rjmp	.+208    	; 0xbb6 <GPIO_SetPinValue+0xf2>
     ae6:	2b b3       	in	r18, 0x1b	; 27
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <GPIO_SetPinValue+0x2e>
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	6a 95       	dec	r22
     af4:	e2 f7       	brpl	.-8      	; 0xaee <GPIO_SetPinValue+0x2a>
     af6:	82 2b       	or	r24, r18
     af8:	8b bb       	out	0x1b, r24	; 27
     afa:	08 95       	ret
     afc:	2b b3       	in	r18, 0x1b	; 27
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <GPIO_SetPinValue+0x44>
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	6a 95       	dec	r22
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <GPIO_SetPinValue+0x40>
     b0c:	80 95       	com	r24
     b0e:	82 23       	and	r24, r18
     b10:	8b bb       	out	0x1b, r24	; 27
     b12:	08 95       	ret
     b14:	44 23       	and	r20, r20
     b16:	71 f0       	breq	.+28     	; 0xb34 <GPIO_SetPinValue+0x70>
     b18:	41 30       	cpi	r20, 0x01	; 1
     b1a:	09 f0       	breq	.+2      	; 0xb1e <GPIO_SetPinValue+0x5a>
     b1c:	4c c0       	rjmp	.+152    	; 0xbb6 <GPIO_SetPinValue+0xf2>
     b1e:	28 b3       	in	r18, 0x18	; 24
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <GPIO_SetPinValue+0x66>
     b26:	88 0f       	add	r24, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	6a 95       	dec	r22
     b2c:	e2 f7       	brpl	.-8      	; 0xb26 <GPIO_SetPinValue+0x62>
     b2e:	82 2b       	or	r24, r18
     b30:	88 bb       	out	0x18, r24	; 24
     b32:	08 95       	ret
     b34:	28 b3       	in	r18, 0x18	; 24
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <GPIO_SetPinValue+0x7c>
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	6a 95       	dec	r22
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <GPIO_SetPinValue+0x78>
     b44:	80 95       	com	r24
     b46:	82 23       	and	r24, r18
     b48:	88 bb       	out	0x18, r24	; 24
     b4a:	08 95       	ret
     b4c:	44 23       	and	r20, r20
     b4e:	69 f0       	breq	.+26     	; 0xb6a <GPIO_SetPinValue+0xa6>
     b50:	41 30       	cpi	r20, 0x01	; 1
     b52:	89 f5       	brne	.+98     	; 0xbb6 <GPIO_SetPinValue+0xf2>
     b54:	25 b3       	in	r18, 0x15	; 21
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <GPIO_SetPinValue+0x9c>
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	6a 95       	dec	r22
     b62:	e2 f7       	brpl	.-8      	; 0xb5c <GPIO_SetPinValue+0x98>
     b64:	82 2b       	or	r24, r18
     b66:	85 bb       	out	0x15, r24	; 21
     b68:	08 95       	ret
     b6a:	25 b3       	in	r18, 0x15	; 21
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <GPIO_SetPinValue+0xb2>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	6a 95       	dec	r22
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <GPIO_SetPinValue+0xae>
     b7a:	80 95       	com	r24
     b7c:	82 23       	and	r24, r18
     b7e:	85 bb       	out	0x15, r24	; 21
     b80:	08 95       	ret
     b82:	44 23       	and	r20, r20
     b84:	69 f0       	breq	.+26     	; 0xba0 <GPIO_SetPinValue+0xdc>
     b86:	41 30       	cpi	r20, 0x01	; 1
     b88:	b1 f4       	brne	.+44     	; 0xbb6 <GPIO_SetPinValue+0xf2>
     b8a:	22 b3       	in	r18, 0x12	; 18
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <GPIO_SetPinValue+0xd2>
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	6a 95       	dec	r22
     b98:	e2 f7       	brpl	.-8      	; 0xb92 <GPIO_SetPinValue+0xce>
     b9a:	82 2b       	or	r24, r18
     b9c:	82 bb       	out	0x12, r24	; 18
     b9e:	08 95       	ret
     ba0:	22 b3       	in	r18, 0x12	; 18
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <GPIO_SetPinValue+0xe8>
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	6a 95       	dec	r22
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <GPIO_SetPinValue+0xe4>
     bb0:	80 95       	com	r24
     bb2:	82 23       	and	r24, r18
     bb4:	82 bb       	out	0x12, r24	; 18
     bb6:	08 95       	ret

00000bb8 <GPIO_u8GetPinValue>:
     bb8:	68 30       	cpi	r22, 0x08	; 8
     bba:	60 f5       	brcc	.+88     	; 0xc14 <GPIO_u8GetPinValue+0x5c>
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	79 f0       	breq	.+30     	; 0xbde <GPIO_u8GetPinValue+0x26>
     bc0:	28 f0       	brcs	.+10     	; 0xbcc <GPIO_u8GetPinValue+0x14>
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	a9 f0       	breq	.+42     	; 0xbf0 <GPIO_u8GetPinValue+0x38>
     bc6:	83 30       	cpi	r24, 0x03	; 3
     bc8:	e1 f0       	breq	.+56     	; 0xc02 <GPIO_u8GetPinValue+0x4a>
     bca:	26 c0       	rjmp	.+76     	; 0xc18 <GPIO_u8GetPinValue+0x60>
     bcc:	89 b3       	in	r24, 0x19	; 25
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <GPIO_u8GetPinValue+0x1e>
     bd2:	95 95       	asr	r25
     bd4:	87 95       	ror	r24
     bd6:	6a 95       	dec	r22
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <GPIO_u8GetPinValue+0x1a>
     bda:	81 70       	andi	r24, 0x01	; 1
     bdc:	08 95       	ret
     bde:	86 b3       	in	r24, 0x16	; 22
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <GPIO_u8GetPinValue+0x30>
     be4:	95 95       	asr	r25
     be6:	87 95       	ror	r24
     be8:	6a 95       	dec	r22
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <GPIO_u8GetPinValue+0x2c>
     bec:	81 70       	andi	r24, 0x01	; 1
     bee:	08 95       	ret
     bf0:	83 b3       	in	r24, 0x13	; 19
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_u8GetPinValue+0x42>
     bf6:	95 95       	asr	r25
     bf8:	87 95       	ror	r24
     bfa:	6a 95       	dec	r22
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_u8GetPinValue+0x3e>
     bfe:	81 70       	andi	r24, 0x01	; 1
     c00:	08 95       	ret
     c02:	80 b3       	in	r24, 0x10	; 16
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <GPIO_u8GetPinValue+0x54>
     c08:	95 95       	asr	r25
     c0a:	87 95       	ror	r24
     c0c:	6a 95       	dec	r22
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <GPIO_u8GetPinValue+0x50>
     c10:	81 70       	andi	r24, 0x01	; 1
     c12:	08 95       	ret
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	08 95       	ret
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	08 95       	ret

00000c1c <GPIO_TogglePin>:
     c1c:	68 30       	cpi	r22, 0x08	; 8
     c1e:	98 f5       	brcc	.+102    	; 0xc86 <GPIO_TogglePin+0x6a>
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	89 f0       	breq	.+34     	; 0xc46 <GPIO_TogglePin+0x2a>
     c24:	28 f0       	brcs	.+10     	; 0xc30 <GPIO_TogglePin+0x14>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	c9 f0       	breq	.+50     	; 0xc5c <GPIO_TogglePin+0x40>
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	11 f1       	breq	.+68     	; 0xc72 <GPIO_TogglePin+0x56>
     c2e:	08 95       	ret
     c30:	2b b3       	in	r18, 0x1b	; 27
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <GPIO_TogglePin+0x20>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	6a 95       	dec	r22
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <GPIO_TogglePin+0x1c>
     c40:	82 27       	eor	r24, r18
     c42:	8b bb       	out	0x1b, r24	; 27
     c44:	08 95       	ret
     c46:	28 b3       	in	r18, 0x18	; 24
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_TogglePin+0x36>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	6a 95       	dec	r22
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_TogglePin+0x32>
     c56:	82 27       	eor	r24, r18
     c58:	88 bb       	out	0x18, r24	; 24
     c5a:	08 95       	ret
     c5c:	25 b3       	in	r18, 0x15	; 21
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <GPIO_TogglePin+0x4c>
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	6a 95       	dec	r22
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <GPIO_TogglePin+0x48>
     c6c:	82 27       	eor	r24, r18
     c6e:	85 bb       	out	0x15, r24	; 21
     c70:	08 95       	ret
     c72:	22 b3       	in	r18, 0x12	; 18
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <GPIO_TogglePin+0x62>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	6a 95       	dec	r22
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <GPIO_TogglePin+0x5e>
     c82:	82 27       	eor	r24, r18
     c84:	82 bb       	out	0x12, r24	; 18
     c86:	08 95       	ret

00000c88 <GPIO_SPI_SlaveInit>:
	// Set MISO output, all others input
	#define SLAVE_MISO_PIN		PORTB	,	PIN6	,	OUTPUT
	#define SLAVE_MOSI_PIN		PORTB	,	PIN5	,	INPUT_FLOAT
	#define SLAVE_SCK_PIN		PORTB	,	PIN7	,	INPUT_FLOAT
	#define SLAVE_SS_PIN		PORTB	,	PIN4	,	INPUT_FLOAT
	GPIO_SetPinDirection(SLAVE_MOSI_PIN) ;
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	65 e0       	ldi	r22, 0x05	; 5
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(SLAVE_SCK_PIN) ;
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	67 e0       	ldi	r22, 0x07	; 7
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(SLAVE_MISO_PIN) ;
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	66 e0       	ldi	r22, 0x06	; 6
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
	GPIO_SetPinDirection(SLAVE_SS_PIN) ;
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	64 e0       	ldi	r22, 0x04	; 4
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 91 04 	call	0x922	; 0x922 <GPIO_SetPinDirection>
     cb0:	08 95       	ret

00000cb2 <PWM_Init>:
	
	else
	{
		// <TODO ERROR> DC OUT OF RANGE
	}
}
     cb2:	fc 01       	movw	r30, r24
     cb4:	80 81       	ld	r24, Z
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	89 f0       	breq	.+34     	; 0xcdc <PWM_Init+0x2a>
     cba:	20 f0       	brcs	.+8      	; 0xcc4 <PWM_Init+0x12>
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <PWM_Init+0x10>
     cc0:	5e c0       	rjmp	.+188    	; 0xd7e <PWM_Init+0xcc>
     cc2:	08 95       	ret
     cc4:	93 b7       	in	r25, 0x33	; 51
     cc6:	81 81       	ldd	r24, Z+1	; 0x01
     cc8:	89 2b       	or	r24, r25
     cca:	83 bf       	out	0x33, r24	; 51
     ccc:	83 b7       	in	r24, 0x33	; 51
     cce:	88 7f       	andi	r24, 0xF8	; 248
     cd0:	83 bf       	out	0x33, r24	; 51
     cd2:	93 b7       	in	r25, 0x33	; 51
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	89 2b       	or	r24, r25
     cd8:	83 bf       	out	0x33, r24	; 51
     cda:	08 95       	ret
     cdc:	9f b5       	in	r25, 0x2f	; 47
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	83 70       	andi	r24, 0x03	; 3
     ce2:	89 2b       	or	r24, r25
     ce4:	8f bd       	out	0x2f, r24	; 47
     ce6:	2e b5       	in	r18, 0x2e	; 46
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	96 95       	lsr	r25
     cec:	96 95       	lsr	r25
     cee:	89 2f       	mov	r24, r25
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	88 0f       	add	r24, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	82 2b       	or	r24, r18
     d00:	8e bd       	out	0x2e, r24	; 46
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	c1 f0       	breq	.+48     	; 0xd38 <PWM_Init+0x86>
     d08:	28 f4       	brcc	.+10     	; 0xd14 <PWM_Init+0x62>
     d0a:	88 23       	and	r24, r24
     d0c:	49 f0       	breq	.+18     	; 0xd20 <PWM_Init+0x6e>
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	61 f0       	breq	.+24     	; 0xd2a <PWM_Init+0x78>
     d12:	2d c0       	rjmp	.+90     	; 0xd6e <PWM_Init+0xbc>
     d14:	84 30       	cpi	r24, 0x04	; 4
     d16:	f1 f0       	breq	.+60     	; 0xd54 <PWM_Init+0xa2>
     d18:	b0 f0       	brcs	.+44     	; 0xd46 <PWM_Init+0x94>
     d1a:	85 30       	cpi	r24, 0x05	; 5
     d1c:	11 f1       	breq	.+68     	; 0xd62 <PWM_Init+0xb0>
     d1e:	27 c0       	rjmp	.+78     	; 0xd6e <PWM_Init+0xbc>
     d20:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TIMER1_Prescaler+0x1>
     d24:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <TIMER1_Prescaler>
     d28:	22 c0       	rjmp	.+68     	; 0xd6e <PWM_Init+0xbc>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <TIMER1_Prescaler+0x1>
     d32:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TIMER1_Prescaler>
     d36:	1b c0       	rjmp	.+54     	; 0xd6e <PWM_Init+0xbc>
     d38:	88 e0       	ldi	r24, 0x08	; 8
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <TIMER1_Prescaler+0x1>
     d40:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TIMER1_Prescaler>
     d44:	14 c0       	rjmp	.+40     	; 0xd6e <PWM_Init+0xbc>
     d46:	80 e4       	ldi	r24, 0x40	; 64
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <TIMER1_Prescaler+0x1>
     d4e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TIMER1_Prescaler>
     d52:	0d c0       	rjmp	.+26     	; 0xd6e <PWM_Init+0xbc>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <TIMER1_Prescaler+0x1>
     d5c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TIMER1_Prescaler>
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <PWM_Init+0xbc>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	94 e0       	ldi	r25, 0x04	; 4
     d66:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <TIMER1_Prescaler+0x1>
     d6a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TIMER1_Prescaler>
     d6e:	8e b5       	in	r24, 0x2e	; 46
     d70:	88 7f       	andi	r24, 0xF8	; 248
     d72:	8e bd       	out	0x2e, r24	; 46
     d74:	9e b5       	in	r25, 0x2e	; 46
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	89 2b       	or	r24, r25
     d7a:	8e bd       	out	0x2e, r24	; 46
     d7c:	08 95       	ret
     d7e:	95 b5       	in	r25, 0x25	; 37
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	89 2b       	or	r24, r25
     d84:	85 bd       	out	0x25, r24	; 37
     d86:	85 b5       	in	r24, 0x25	; 37
     d88:	88 7f       	andi	r24, 0xF8	; 248
     d8a:	85 bd       	out	0x25, r24	; 37
     d8c:	95 b5       	in	r25, 0x25	; 37
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	89 2b       	or	r24, r25
     d92:	85 bd       	out	0x25, r24	; 37
     d94:	08 95       	ret

00000d96 <PWM_SetOCPin>:
     d96:	fc 01       	movw	r30, r24
     d98:	80 81       	ld	r24, Z
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	41 f0       	breq	.+16     	; 0xdae <PWM_SetOCPin+0x18>
     d9e:	18 f0       	brcs	.+6      	; 0xda6 <PWM_SetOCPin+0x10>
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	49 f0       	breq	.+18     	; 0xdb6 <PWM_SetOCPin+0x20>
     da4:	08 95       	ret
     da6:	83 b7       	in	r24, 0x33	; 51
     da8:	68 2b       	or	r22, r24
     daa:	63 bf       	out	0x33, r22	; 51
     dac:	08 95       	ret
     dae:	8f b5       	in	r24, 0x2f	; 47
     db0:	68 2b       	or	r22, r24
     db2:	6f bd       	out	0x2f, r22	; 47
     db4:	08 95       	ret
     db6:	85 b5       	in	r24, 0x25	; 37
     db8:	68 2b       	or	r22, r24
     dba:	65 bd       	out	0x25, r22	; 37
     dbc:	08 95       	ret

00000dbe <PWM_PhaseFrequencyCorrectSetValues>:
	else
	{
		// ANTI GLITCH DISABLED
		// GOTO ANTI GLITCH MODE BY
		// SET WGM13 = 1    WGM12=0    WGM11=0      WGM10=0
		SET_BIT(TIM_TCCR1B,TCCR1B_WGM13);
     dbe:	8e b5       	in	r24, 0x2e	; 46
     dc0:	80 61       	ori	r24, 0x10	; 16
     dc2:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TIM_TCCR1B,TCCR1B_WGM12);
     dc4:	8e b5       	in	r24, 0x2e	; 46
     dc6:	87 7f       	andi	r24, 0xF7	; 247
     dc8:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TIM_TCCR1A,TCCR1A_WGM10);
     dca:	8f b5       	in	r24, 0x2f	; 47
     dcc:	8e 7f       	andi	r24, 0xFE	; 254
     dce:	8f bd       	out	0x2f, r24	; 47
		CLR_BIT(TIM_TCCR1A,TCCR1A_WGM11);
     dd0:	8f b5       	in	r24, 0x2f	; 47
     dd2:	8d 7f       	andi	r24, 0xFD	; 253
     dd4:	8f bd       	out	0x2f, r24	; 47
		// Calculation and set OCR1A as a Top NOT This Freq During Up-Down Count so we need Half of it to calc TOP val
		TIM_ICR1 = copy_u16TopValue ;
     dd6:	57 bd       	out	0x27, r21	; 39
     dd8:	46 bd       	out	0x26, r20	; 38
		/*	CHK WHICH PIN USED	*/
		if(setOCpinMode == PWM1_PD4_FM_NON_INVERTING ||setOCpinMode == PWM1_PD4_FM_INVERTING )
     dda:	60 32       	cpi	r22, 0x20	; 32
     ddc:	11 f0       	breq	.+4      	; 0xde2 <PWM_PhaseFrequencyCorrectSetValues+0x24>
     dde:	60 33       	cpi	r22, 0x30	; 48
     de0:	19 f4       	brne	.+6      	; 0xde8 <PWM_PhaseFrequencyCorrectSetValues+0x2a>
		{
			TIM_OCR1B = copy_u16CompValue ;
     de2:	39 bd       	out	0x29, r19	; 41
     de4:	28 bd       	out	0x28, r18	; 40
     de6:	08 95       	ret

		}
		else if (setOCpinMode == PWM1_PD5_FM_NON_INVERTING ||setOCpinMode == PWM1_PD5_FM_INVERTING)
     de8:	60 38       	cpi	r22, 0x80	; 128
     dea:	11 f0       	breq	.+4      	; 0xdf0 <PWM_PhaseFrequencyCorrectSetValues+0x32>
     dec:	60 3c       	cpi	r22, 0xC0	; 192
     dee:	11 f4       	brne	.+4      	; 0xdf4 <PWM_PhaseFrequencyCorrectSetValues+0x36>
		{
			TIM_OCR1A = copy_u16CompValue ;
     df0:	3b bd       	out	0x2b, r19	; 43
     df2:	2a bd       	out	0x2a, r18	; 42
     df4:	08 95       	ret

00000df6 <SPI_Init>:
{
	/*          CHECK IF SPI ENABLED OR NOT     */
	if (SPI_SPCR & 0b01000000)
	{
		/* Enable Interrupt */
		SPI_SPCR &= ~ SPI_INTERRUPT_ENABLE ;
     df6:	fc 01       	movw	r30, r24
     df8:	85 81       	ldd	r24, Z+5	; 0x05
     dfa:	82 ff       	sbrs	r24, 2
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <SPI_Init+0x10>
     dfe:	8e b1       	in	r24, 0x0e	; 14
     e00:	81 60       	ori	r24, 0x01	; 1
     e02:	8e b9       	out	0x0e, r24	; 14
     e04:	03 c0       	rjmp	.+6      	; 0xe0c <SPI_Init+0x16>
     e06:	8e b1       	in	r24, 0x0e	; 14
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	8e b9       	out	0x0e, r24	; 14
     e0c:	50 81       	ld	r21, Z
     e0e:	81 81       	ldd	r24, Z+1	; 0x01
     e10:	42 81       	ldd	r20, Z+2	; 0x02
     e12:	33 81       	ldd	r19, Z+3	; 0x03
     e14:	24 81       	ldd	r18, Z+4	; 0x04
     e16:	95 81       	ldd	r25, Z+5	; 0x05
     e18:	85 2b       	or	r24, r21
     e1a:	84 2b       	or	r24, r20
     e1c:	83 2b       	or	r24, r19
     e1e:	82 2b       	or	r24, r18
     e20:	93 70       	andi	r25, 0x03	; 3
     e22:	89 2b       	or	r24, r25
     e24:	80 64       	ori	r24, 0x40	; 64
     e26:	8d b9       	out	0x0d, r24	; 13
     e28:	08 95       	ret

00000e2a <SPI_ByteExchangeAsynch>:
     e2a:	6e 9b       	sbis	0x0d, 6	; 13
     e2c:	06 c0       	rjmp	.+12     	; 0xe3a <SPI_ByteExchangeAsynch+0x10>
     e2e:	8f b9       	out	0x0f, r24	; 15
     e30:	77 9b       	sbis	0x0e, 7	; 14
     e32:	fe cf       	rjmp	.-4      	; 0xe30 <SPI_ByteExchangeAsynch+0x6>
     e34:	8f b1       	in	r24, 0x0f	; 15
     e36:	fb 01       	movw	r30, r22
     e38:	80 83       	st	Z, r24
     e3a:	08 95       	ret

00000e3c <__vector_10>:
		//<TODO ERROR> SPI MODULE NOT ENABLED
	}
}

void __vector_10(void)
{
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
	Global_ExchangeComplate() ;
     e5e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <Global_ExchangeComplate>
     e62:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <Global_ExchangeComplate+0x1>
     e66:	09 95       	icall
	
}
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <MCAL_u8PrivateEffectiveData>:
		case USART_FRAME_ERROR_FLAG:  
			LOC_u8Result = ((USART_UCSRA & UCSRA_FE) >> 4)?	USART_FR  : USART_NO_FR ;
			break ;	
	}
	return LOC_u8Result ; 
}
     e8a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <Global_UART_CONFG>
     e8e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <Global_UART_CONFG+0x1>
     e92:	92 81       	ldd	r25, Z+2	; 0x02
     e94:	91 30       	cpi	r25, 0x01	; 1
     e96:	49 f0       	breq	.+18     	; 0xeaa <MCAL_u8PrivateEffectiveData+0x20>
     e98:	30 f0       	brcs	.+12     	; 0xea6 <MCAL_u8PrivateEffectiveData+0x1c>
     e9a:	92 30       	cpi	r25, 0x02	; 2
     e9c:	41 f0       	breq	.+16     	; 0xeae <MCAL_u8PrivateEffectiveData+0x24>
     e9e:	93 30       	cpi	r25, 0x03	; 3
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <MCAL_u8PrivateEffectiveData+0x26>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	08 95       	ret
     ea6:	8f 71       	andi	r24, 0x1F	; 31
     ea8:	08 95       	ret
     eaa:	8f 73       	andi	r24, 0x3F	; 63
     eac:	08 95       	ret
     eae:	8f 77       	andi	r24, 0x7F	; 127
     eb0:	08 95       	ret

00000eb2 <USART_Init>:
     eb2:	fc 01       	movw	r30, r24
     eb4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Global_UART_CONFG+0x1>
     eb8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Global_UART_CONFG>
     ebc:	8a b1       	in	r24, 0x0a	; 10
     ebe:	87 7e       	andi	r24, 0xE7	; 231
     ec0:	8a b9       	out	0x0a, r24	; 10
     ec2:	2a b1       	in	r18, 0x0a	; 10
     ec4:	95 81       	ldd	r25, Z+5	; 0x05
     ec6:	89 2f       	mov	r24, r25
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	82 2b       	or	r24, r18
     ed8:	8a b9       	out	0x0a, r24	; 10
     eda:	82 81       	ldd	r24, Z+2	; 0x02
     edc:	82 ff       	sbrs	r24, 2
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <USART_Init+0x36>
     ee0:	8a b1       	in	r24, 0x0a	; 10
     ee2:	84 60       	ori	r24, 0x04	; 4
     ee4:	8a b9       	out	0x0a, r24	; 10
     ee6:	03 c0       	rjmp	.+6      	; 0xeee <USART_Init+0x3c>
     ee8:	8a b1       	in	r24, 0x0a	; 10
     eea:	8b 7f       	andi	r24, 0xFB	; 251
     eec:	8a b9       	out	0x0a, r24	; 10
     eee:	22 81       	ldd	r18, Z+2	; 0x02
     ef0:	23 70       	andi	r18, 0x03	; 3
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	22 0f       	add	r18, r18
     ef6:	33 1f       	adc	r19, r19
     ef8:	93 81       	ldd	r25, Z+3	; 0x03
     efa:	84 81       	ldd	r24, Z+4	; 0x04
     efc:	29 2b       	or	r18, r25
     efe:	28 2b       	or	r18, r24
     f00:	20 68       	ori	r18, 0x80	; 128
     f02:	20 bd       	out	0x20, r18	; 32
     f04:	20 81       	ld	r18, Z
     f06:	31 81       	ldd	r19, Z+1	; 0x01
     f08:	c9 01       	movw	r24, r18
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	aa 1f       	adc	r26, r26
     f14:	bb 1f       	adc	r27, r27
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	aa 1f       	adc	r26, r26
     f1c:	bb 1f       	adc	r27, r27
     f1e:	9c 01       	movw	r18, r24
     f20:	ad 01       	movw	r20, r26
     f22:	22 0f       	add	r18, r18
     f24:	33 1f       	adc	r19, r19
     f26:	44 1f       	adc	r20, r20
     f28:	55 1f       	adc	r21, r21
     f2a:	22 0f       	add	r18, r18
     f2c:	33 1f       	adc	r19, r19
     f2e:	44 1f       	adc	r20, r20
     f30:	55 1f       	adc	r21, r21
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	74 e2       	ldi	r23, 0x24	; 36
     f36:	84 ef       	ldi	r24, 0xF4	; 244
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 1b 08 	call	0x1036	; 0x1036 <__udivmodsi4>
     f3e:	21 50       	subi	r18, 0x01	; 1
     f40:	29 b9       	out	0x09, r18	; 9
     f42:	10 bc       	out	0x20, r1	; 32
     f44:	08 95       	ret

00000f46 <USART_TxByteSynch>:
     f46:	5d 9b       	sbis	0x0b, 5	; 11
     f48:	fe cf       	rjmp	.-4      	; 0xf46 <USART_TxByteSynch>
     f4a:	0e 94 45 07 	call	0xe8a	; 0xe8a <MCAL_u8PrivateEffectiveData>
     f4e:	8c b9       	out	0x0c, r24	; 12
     f50:	08 95       	ret

00000f52 <USART_TxChar>:
     f52:	0e 94 a3 07 	call	0xf46	; 0xf46 <USART_TxByteSynch>
     f56:	08 95       	ret

00000f58 <USART_SendString>:
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	8c 01       	movw	r16, r24
     f60:	c0 e0       	ldi	r28, 0x00	; 0
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <USART_SendString+0x12>
     f64:	0e 94 a9 07 	call	0xf52	; 0xf52 <USART_TxChar>
     f68:	cf 5f       	subi	r28, 0xFF	; 255
     f6a:	f8 01       	movw	r30, r16
     f6c:	ec 0f       	add	r30, r28
     f6e:	f1 1d       	adc	r31, r1
     f70:	80 81       	ld	r24, Z
     f72:	81 11       	cpse	r24, r1
     f74:	f7 cf       	rjmp	.-18     	; 0xf64 <USART_SendString+0xc>
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <USART_RxByteAsynch>:
     f7e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <Global_RxComplate+0x1>
     f82:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Global_RxComplate>
     f86:	8a b1       	in	r24, 0x0a	; 10
     f88:	80 68       	ori	r24, 0x80	; 128
     f8a:	8a b9       	out	0x0a, r24	; 10
     f8c:	08 95       	ret

00000f8e <USART_ClearFlags>:
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <USART_ClearFlags+0x4>
     f90:	8c b1       	in	r24, 0x0c	; 12
     f92:	5f 99       	sbic	0x0b, 7	; 11
     f94:	fd cf       	rjmp	.-6      	; 0xf90 <USART_ClearFlags+0x2>
     f96:	08 95       	ret

00000f98 <__vector_11>:
 void __vector_11(void)	//USART, Rx Complete
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	2f 93       	push	r18
     fa4:	3f 93       	push	r19
     fa6:	4f 93       	push	r20
     fa8:	5f 93       	push	r21
     faa:	6f 93       	push	r22
     fac:	7f 93       	push	r23
     fae:	8f 93       	push	r24
     fb0:	9f 93       	push	r25
     fb2:	af 93       	push	r26
     fb4:	bf 93       	push	r27
     fb6:	ef 93       	push	r30
     fb8:	ff 93       	push	r31
	u8 tempData = USART_UDR ; 
     fba:	8c b1       	in	r24, 0x0c	; 12
	Global_RxComplate(tempData)  ;
     fbc:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <Global_RxComplate>
     fc0:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <Global_RxComplate+0x1>
     fc4:	09 95       	icall
}
     fc6:	ff 91       	pop	r31
     fc8:	ef 91       	pop	r30
     fca:	bf 91       	pop	r27
     fcc:	af 91       	pop	r26
     fce:	9f 91       	pop	r25
     fd0:	8f 91       	pop	r24
     fd2:	7f 91       	pop	r23
     fd4:	6f 91       	pop	r22
     fd6:	5f 91       	pop	r21
     fd8:	4f 91       	pop	r20
     fda:	3f 91       	pop	r19
     fdc:	2f 91       	pop	r18
     fde:	0f 90       	pop	r0
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	0f 90       	pop	r0
     fe4:	1f 90       	pop	r1
     fe6:	18 95       	reti

00000fe8 <__vector_13>:

 void __vector_13(void)    //USART, Tx Complete
{
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
	Global_TxComplate();
    100a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <Global_TxComplate>
    100e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <Global_TxComplate+0x1>
    1012:	09 95       	icall
}
    1014:	ff 91       	pop	r31
    1016:	ef 91       	pop	r30
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <__udivmodsi4>:
    1036:	a1 e2       	ldi	r26, 0x21	; 33
    1038:	1a 2e       	mov	r1, r26
    103a:	aa 1b       	sub	r26, r26
    103c:	bb 1b       	sub	r27, r27
    103e:	fd 01       	movw	r30, r26
    1040:	0d c0       	rjmp	.+26     	; 0x105c <__udivmodsi4_ep>

00001042 <__udivmodsi4_loop>:
    1042:	aa 1f       	adc	r26, r26
    1044:	bb 1f       	adc	r27, r27
    1046:	ee 1f       	adc	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	a2 17       	cp	r26, r18
    104c:	b3 07       	cpc	r27, r19
    104e:	e4 07       	cpc	r30, r20
    1050:	f5 07       	cpc	r31, r21
    1052:	20 f0       	brcs	.+8      	; 0x105c <__udivmodsi4_ep>
    1054:	a2 1b       	sub	r26, r18
    1056:	b3 0b       	sbc	r27, r19
    1058:	e4 0b       	sbc	r30, r20
    105a:	f5 0b       	sbc	r31, r21

0000105c <__udivmodsi4_ep>:
    105c:	66 1f       	adc	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	88 1f       	adc	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	1a 94       	dec	r1
    1066:	69 f7       	brne	.-38     	; 0x1042 <__udivmodsi4_loop>
    1068:	60 95       	com	r22
    106a:	70 95       	com	r23
    106c:	80 95       	com	r24
    106e:	90 95       	com	r25
    1070:	9b 01       	movw	r18, r22
    1072:	ac 01       	movw	r20, r24
    1074:	bd 01       	movw	r22, r26
    1076:	cf 01       	movw	r24, r30
    1078:	08 95       	ret

0000107a <_exit>:
    107a:	f8 94       	cli

0000107c <__stop_program>:
    107c:	ff cf       	rjmp	.-2      	; 0x107c <__stop_program>
